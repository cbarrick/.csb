{"mode":"editor","version":"0.73.0","windowDimensions":{"x":273,"y":55,"width":1133,"height":820},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{"/Users/csb/.atom/config.cson":"source.js"}},"project":{"path":"/Users/csb/Desktop/WorkoutEditorJS","buffers":[{"text":"'use strict';\r\n\r\n// Global Setup and Helpers\r\n// =========================\r\n\r\n// We have to change the template markers to avoid conflict with ASP.Net\r\n_.templateSettings = {\r\n\tevaluate: /\\{%[^-](.+?)%\\}/g,  // {% evaluate %}\r\n\tinterpolate: /\\{\\{(.+?)\\}\\}/g, // {{ interpolate }}\r\n\tescape: /\\{\\{-(.+?)\\}\\}/g      // {{- escape }}\r\n}\r\n\r\n// Formats a string to be less than `max` characters long.\r\nvar clipString = function (str, max) {\r\n\tif (!max) max = 100;\r\n\tif (str.length > max) {\r\n\t\tstr = str.substring(0, max) + '...';\r\n\t}\r\n\treturn str;\r\n}\r\n\r\n\r\n// Models and Collections\r\n// =========================\r\n// Models represent the data avaliable through the REST api.\r\n// Backbone automagically provides a REST client for all models.\r\n//\r\n// Collections are special models used for collections of models (what a surprise)\r\n//\r\n// For example, the data provided by `/api/cycles` would be modeled by a\r\n// collection while the data at `/api/cycles/<guid>` would use a plain model.\r\n//\r\n// Each collection provides a default REST url to its members by appending\r\n// the member's ID to the end of the collection's url.\r\n//\r\n// Generally speaking, you don't want to instantiate Models directly.\r\n// Instead, use the `create` method of the appropriate Collection.\r\n\r\n// BaseModel\r\n// -------------------------\r\n// Serves as the base for all non-collection models. Provides the following:\r\n//   - If the derived class has a `View` (capital V), it is instantiated as `this.view` (small v).\r\n//   - Nested models are supported for JSON serialization.\r\n//   - A `summarize` method that returns a human readable summary of the model.\r\n\r\nvar BaseModel = Backbone.Model.extend({\r\n\r\n\tinitialize: function () {\r\n\t\tif (this.View) this.view = new this.View({\r\n\t\t\tmodel: this,\r\n\t\t\tcollection: this.collection\r\n\t\t})\r\n\t\treturn this;\r\n\t},\r\n\r\n\t// We override toJSON to support nested models\r\n\ttoJSON: function(options) {\r\n\t\tvar result = {};\r\n\t\tvar attrs = this.attributes;\r\n\t\tfor (var prop in attrs) {\r\n\t\t\tif (attrs[prop] && typeof attrs[prop].toJSON === 'function') {\r\n\t\t\t\tresult[prop] = attrs[prop].toJSON();\r\n\t\t\t} else {\r\n\t\t\t\tresult[prop] = attrs[prop];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\r\n\t// Returns a human readable summary of the model\r\n\tsummarize: function () {\r\n\t\treturn '';\r\n\t}\r\n})\r\n\r\n\r\n// BaseCollection\r\n// -------------------------\r\n// Serves as the base model for Collections. Provides the following:\r\n//   - If the derived class has a `View` (capital V), it is instantiated as `this.view` (small v).\r\n\r\nvar BaseCollection = Backbone.Collection.extend({\r\n\r\n\tinitialize: function () {\r\n\t\tif (this.View) this.view = new this.View({\r\n\t\t\tmodel: this,\r\n\t\t\tcollection: this\r\n\t\t})\r\n\t\treturn this;\r\n\t}\r\n})\r\n\r\n\r\n// Views\r\n// =========================\r\n// Views are the logical components to elements in the DOM. They handle user interactions and\r\n// manage associated models and collections. The markup for a view is defined in the HTML under\r\n// special script tags. Views use the underscore.js template features.\r\n\r\n// BaseView\r\n// -------------------------\r\n// Serves as the base of all views in this application. Provides the following:\r\n//   - The root element will have its id attribute set to the id of the backing model.\r\n//   - The view will re-render itself whenever the backing model is changed.\r\n//   - Supports multiple templates. 2014-03-12: No concrete view takes advantage of this.\r\n//   - The current template name is avliable on the root element through `data-template`.\r\n//   - Templates can use the `data-content` attribute to interpolate nested models.\r\n//     See the template API docs in the HTML page.\r\n\r\nvar BaseView = Backbone.View.extend({\r\n\tclassName: 'record',  // The class of the root element\r\n\ttagName: 'section',   // All views used here are used to introduce sections or a hierarchy\r\n\ttemplateName: 'main', // Name of the template to be used\r\n\r\n\t// Mapping from template names to template functions or strings. If the value is a string,\r\n\t// the element with the corresponding id is take and compiled into a template function.\r\n\ttemplates: {\r\n\t\t'main': null // You gotta override this\r\n\t},\r\n\r\n\t// Attributes to be set on the root element of the view\r\n\tattributes: function () {\r\n\t\treturn {\r\n\t\t\t'id': (this.model) ? this.model.id : undefined\r\n\t\t}\r\n\t},\r\n\r\n\tinitialize: function () {\r\n\t\tthis.listenTo(this.model, 'add remove reset sort change destroy', this.render);\r\n\t\treturn this;\r\n\t},\r\n\r\n\trender: function () {\r\n\r\n\t\t// Make the templateName avaliable to CSS\r\n\t\tthis.$el.attr('data-template', this.templateName);\r\n\r\n\t\t// The actual render step.\r\n\t\tthis.renderTemplate();\r\n\r\n\t\t// `bindControls` does nothing by default. Typically override it to cache jQuery results.\r\n\t\tthis.bindControls();\r\n\r\n\t\t// Events must be delegated before rendering the children but after rendering the template.\r\n\t\tthis.delegateEvents();\r\n\r\n\t\t// Render any `data-content` tags\r\n\t\tthis.renderChildren();\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\trenderTemplate: function () {\r\n\t\tvar template = this.templates[this.templateName];\r\n\r\n\t\t// Render the template if it has been compiled\r\n\t\tif ('function' === typeof template) {\r\n\t\t\tvar html = template({\r\n\t\t\t\tmodel: this.model,\r\n\t\t\t\tcollection: this.collection,\r\n\t\t\t\tview: this\r\n\t\t\t})\r\n\t\t\tthis.$el.empty().append(html);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// Compile the template if it hasn't yet been compiled\r\n\t\tif (template) {\r\n\t\t\tvar $template = $('#'+template);\r\n\t\t\tthis.templates[this.templateName] = _.template($template.text());\r\n\t\t\treturn this.renderTemplate.apply(this, arguments);\r\n\t\t}\r\n\r\n\t\tthrow new Error('Cannot render template \\'' + this.templateName + '\\' for view ' + this);\r\n\t},\r\n\r\n\trenderChildren: function () {\r\n\t\t// Any element with a `data-content` will have its content replaced by\r\n\t\t// the corresponding attribute of the model. If the attribute is a\r\n\t\t// view, it will be rendered and its root element inserted.\r\n\t\tthis.$('[data-content]').each(function (index, el) {\r\n\t\t\tvar $el = $(el);\r\n\t\t\tvar member = $el.attr('data-content');\r\n\t\t\tvar value = (this.model) ? this.model.get(member)\r\n\t\t\t          : (this.collection) ? this.collection.get(member)\r\n\t\t\t\t\t  : null;\r\n\t\t\tif ((value instanceof BaseModel) || (value instanceof BaseCollection)) {\r\n\t\t\t\tvalue.view.render();\r\n\t\t\t\t$el.empty().append(value.view.el);\r\n\t\t\t} else {\r\n\t\t\t\t$el.empty().append(value);\r\n\t\t\t}\r\n\t\t}.bind(this))\r\n\t},\r\n\r\n\t// Override this method to cache jQuery results before child-views are rendered.\r\n\tbindControls: function(){\r\n\t\treturn this;\r\n\t}\r\n})\r\n\r\n\r\n// BaseCollectionView\r\n// -------------------------\r\n// Serves as the base view for collections. Provides the following:\r\n//   - Allows ordering of the collection via drag-and-drop\r\n//     The jQuery sortable plugin gets applied to any element with a \"sortable\" class. This view\r\n//     expects that each child of the sortable have a \"data-model-id\" attribute corresponding to\r\n//     a model's id in the collection. Those children are dragged-and-droped to control the\r\n//     ordering of the collection. Each child element should apply a \"handle\" class to one of their\r\n//     decendants to be used as the drag handle.\r\n\r\nvar BaseCollectionView = BaseView.extend({\r\n\ttagName: 'div',\r\n\tclassName: 'collection',\r\n\r\n\ttemplates: {\r\n\t\t'main': 'collection-view'\r\n\t},\r\n\r\n\trender: function () {\r\n\t\tBaseView.prototype.render.apply(this, arguments);\r\n\r\n\t\t// Enable drag-drop reordering\r\n\t\tthis.$sortableList.sortable({\r\n\r\n\t\t\t// Ignore sub-lists which may also be sortable\r\n\t\t\tnested: false,\r\n\r\n\t\t\t// Only drag when clicking the summary\r\n\t\t\thandle: '.handle',\r\n\r\n\t\t\t// How far does the user need to drag before the drag-and-drop stuff starts\r\n\t\t\tdistance: 10,\r\n\r\n\t\t\t// You can't drop an item outside of its list\r\n\t\t\tisValidTarget: function ($item, container) {\r\n\t\t\t\treturn ($item.parent()[0] == container.el[0]);\r\n\t\t\t},\r\n\r\n\t\t\t// Once a list item has been dropped, update the models\r\n\t\t\tonDrop: function ($item, container, _super) {\r\n\t\t\t\t_super.call(this, $item, container);\r\n\t\t\t\tthis.syncOrder();\r\n\t\t\t}.bind(this)\r\n\t\t})\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\t// Syncronises the the collection order and `Sequence` attribute of each\r\n\t// member with the ordered list in DOM\r\n\tsyncOrder: function () {\r\n\t\t_.each(this.$sortableList.children(), function (li, index) {\r\n\t\t\tvar id = $(li).attr('data-model-id');\r\n\t\t\tthis.collection.get(id).set('Sequence', index);\r\n\t\t}.bind(this))\r\n\r\n\t\tthis.collection.sort();\r\n\t},\r\n\r\n\tbindControls: function () {\r\n\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\tthis.$sortableList = this.$('.sortable');\r\n\t\treturn this;\r\n\t}\r\n})\r\n\r\n\r\n// Concrete Classes\r\n// =========================\r\n\r\n// Exercises\r\n// -------------------------\r\n\r\nvar Exercise = BaseModel.extend({\r\n\tidAttribute: 'ExerciseID',\r\n\r\n\tdefaults: {\r\n\t\tTitle: 'Exercise',\r\n\t\tDescription: '',\r\n\t\tNotes: '',\r\n\t\tDateCreated: (new Date()).toISOString(),\r\n\t\tIsTemplate: false,\r\n\t\tState: 0,\r\n\t\tSets: 0,\r\n\t\tAmount: 0,\r\n\t\tUnitOfMeasure: ''\r\n\t\t// Sequence: The position within its collection\r\n\t\t// ExerciseID: The GUID of this\r\n\t\t// RotationID: The GUID of the parent Rotation\r\n\t\t// MovementID: The GUID of the associated movement\r\n\t\t// ImplementID: The GUID of the associated implement\r\n\t},\r\n\r\n\tsummarize: function () {\r\n\t\tvar sets = this.get('Sets');\r\n\t\tvar reps = this.get('Amount');\r\n\t\tvar units = this.get('UnitsOfMeasure');\r\n\t\tvar desc = clipString(this.get('Description'));\r\n\r\n\t\t// Starts with a space so that we always have something to show.\r\n\t\tvar str = '&nbsp;';\r\n\r\n\t\tif (sets) str += sets\r\n\t\tif (sets && reps) str += ' x ';\r\n\t\tif (reps) str += reps;\r\n\t\tif (units) str += ' ' + units;\r\n\t\treturn str;\r\n\t},\r\n\r\n\tView: BaseView.extend({\r\n\t\tclassName: 'exercise ' + BaseView.prototype.className,\r\n\r\n\t\ttemplates: {\r\n\t\t\t'main': 'exercise-view'\r\n\t\t},\r\n\r\n\t\tbindControls: function () {\r\n\t\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\t\tthis.$title = this.$('.title-input');\r\n\t\t\tthis.$desc = this.$('.desc-input');\r\n\t\t\tthis.$sets = this.$('.sets-input');\r\n\t\t\tthis.$reps = this.$('.reps-input');\r\n\t\t\tthis.$units = this.$('.units-input');\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val(),\r\n\t\t\t\t\t'Sets': Number(this.$sets.val()),\r\n\t\t\t\t\t'Amount': Number(this.$reps.val()),\r\n\t\t\t\t\t'UnitsOfMeasure': this.$units.val()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n})\r\n\r\nvar ExerciseCollection = BaseCollection.extend({\r\n\tmodel: Exercise,\r\n\turl: 'https://peakdev.titustechnologies.com/api/exercises',\r\n\tcomparator: 'Sequence',\r\n\r\n\tcreate: function (attributes, options) {\r\n\t\tattributes = _.defaults({}, attributes, {Sequence: this.length});\r\n\t\treturn BaseCollection.prototype.create.call(this, attributes, options);;\r\n\t},\r\n\r\n\tView: BaseCollectionView.extend({}),\r\n})\r\n\r\n\r\n// Rotations\r\n// -------------------------\r\n\r\nvar Rotation = BaseModel.extend({\r\n\tidAttribute: 'RotationID',\r\n\r\n\tdefaults: {\r\n\t\tTitle: 'Rotation',\r\n\t\tDescription: '',\r\n\t\tNotes: '',\r\n\t\tDateCreated: (new Date()).toISOString(),\r\n\t\tIsTemplate: false,\r\n\t\tState: 0,\r\n\t\tAmount: 0\r\n\t\t// ExerciseList: new ExerciseCollection()\r\n\t\t// RotationID: The GUID of this\r\n\t\t// WorkoutID: The GUID of the parent workout\r\n\t\t// Sequence: The position within its collection\r\n\t},\r\n\r\n\tinitialize: function () {\r\n\t\tBaseModel.prototype.initialize.apply(this, arguments);\r\n\t\tthis.on('change:id change:ExerciseList', this.setupList);\r\n\t\tthis.setupList();\r\n\t\treturn this;\r\n\t},\r\n\r\n\tsetupList: function () {\r\n\t\tvar list = this.get('ExerciseList');\r\n\t\tif (!list) {\r\n\t\t\tlist = new ExerciseCollection();\r\n\t\t\tthis.set('ExerciseList', list);\r\n\t\t}\r\n\t},\r\n\r\n\tparse: function(response, options) {\r\n\t\tif (response) {\r\n\t\t\tresponse.ExerciseList = new ExerciseCollection(response.ExerciseList, {parse: true})\r\n\t\t}\r\n\t\treturn response;\r\n\t},\r\n\r\n\tsummarize: function () {\r\n\t\tvar count = this.get('ExerciseList').length;\r\n\t\tvar str = count + ' exercise';\r\n\t\tif (count != 1) str += 's';\r\n\t\treturn str;\r\n\t},\r\n\r\n\tView: BaseView.extend({\r\n\t\tclassName: 'rotation ' + BaseView.prototype.className,\r\n\r\n\t\ttemplates: {\r\n\t\t\t'main': 'rotation-view'\r\n\t\t},\r\n\r\n\t\tbindControls: function () {\r\n\t\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\t\tthis.$title = this.$('.title-input');\r\n\t\t\tthis.$desc = this.$('.desc-input');\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar exercises = this.model.get('ExerciseList');\r\n\t\t\t\texercises.create({'RotationID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val()\r\n\t\t\t\t})\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n})\r\n\r\nvar RotationCollection = BaseCollection.extend({\r\n\tmodel: Rotation,\r\n\turl: 'https://peakdev.titustechnologies.com/api/rotations',\r\n\tcomparator: 'Sequence',\r\n\r\n\tcreate: function (attributes, options) {\r\n\t\tattributes = _.defaults({}, attributes, {Sequence: this.length});\r\n\t\treturn BaseCollection.prototype.create.call(this, attributes, options);\r\n\t},\r\n\r\n\tView: BaseCollectionView.extend({})\r\n})\r\n\r\n\r\n// Workouts\r\n// -------------------------\r\n\r\nvar Workout = BaseModel.extend({\r\n\tidAttribute: 'WorkoutID',\r\n\r\n\tdefaults: {\r\n\t\tTitle: 'Workout',\r\n\t\tDescription: '',\r\n\t\tNotes: '',\r\n\t\tDateCreated: (new Date()).toISOString(),\r\n\t\tIsTemplate: false,\r\n\t\tState: 0\r\n\t\t// RotationList: new RotationCollection()\r\n\t\t// WorkoutID: The GUID of this\r\n\t\t// CycleID: The GUID of the parent cycle\r\n\t\t// Sequence: The position within its collection\r\n\t},\r\n\r\n\tinitialize: function () {\r\n\t\tBaseModel.prototype.initialize.apply(this, arguments);\r\n\t\tthis.on('change:id change:RotationList', this.setupList);\r\n\t\tthis.setupList();\r\n\t\treturn this;\r\n\t},\r\n\r\n\tsetupList: function () {\r\n\t\tvar list = this.get('RotationList');\r\n\t\tif (!list) {\r\n\t\t\tlist = new RotationCollection();\r\n\t\t\tthis.set('RotationList', list);\r\n\t\t}\r\n\t},\r\n\r\n\tparse: function(response, options) {\r\n\t\tif (response) {\r\n\t\t\tresponse.RotationList = new RotationCollection(response.RotationList, {parse: true})\r\n\t\t}\r\n\t\treturn response;\r\n\t},\r\n\r\n\tsummarize: function () {\r\n\t\tvar count = this.get('RotationList').length;\r\n\t\tvar str = count + ' rotation';\r\n\t\tif (count != 1) str += 's';\r\n\t\treturn str;\r\n\t},\r\n\r\n\tView: BaseView.extend({\r\n\t\tclassName: 'workout ' + BaseView.prototype.className,\r\n\r\n\t\ttemplates: {\r\n\t\t\t'main': 'workout-view'\r\n\t\t},\r\n\r\n\t\tbindControls: function () {\r\n\t\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\t\tthis.$title = this.$('.title-input');\r\n\t\t\tthis.$desc = this.$('.desc-input');\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar rotations = this.model.get('RotationList');\r\n\t\t\t\trotations.create({'WorkoutID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val()\r\n\t\t\t\t});\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n})\r\n\r\nvar WorkoutCollection = BaseCollection.extend({\r\n\tmodel: Workout,\r\n\turl: 'https://peakdev.titustechnologies.com/api/workouts',\r\n\tcomparator: 'Sequence',\r\n\r\n\tcreate: function (attributes, options) {\r\n\t\tattributes = _.defaults({}, attributes, {Sequence: this.length});\r\n\t\treturn BaseCollection.prototype.create.call(this, attributes, options);\r\n\t},\r\n\r\n\tView: BaseCollectionView.extend({}),\r\n})\r\n\r\n\r\n// Cycles\r\n// -------------------------\r\n\r\nvar Cycle = BaseModel.extend({\r\n\tidAttribute: 'CycleID',\r\n\r\n\tdefaults: {\r\n\t\tTitle: 'Cycle',\r\n\t\tDescription: '',\r\n\t\tDateCreated: (new Date()).toISOString(),\r\n\t\tIsTemplate: false,\r\n\t\tState: 0\r\n\t\t// WorkoutList: new WorkoutCollection()\r\n\t\t// CycleID: The GUID of this\r\n\t},\r\n\r\n\tinitialize: function () {\r\n\t\tBaseModel.prototype.initialize.apply(this, arguments);\r\n\t\tthis.on('change:id change:WorkoutList', this.setupList);\r\n\t\tthis.setupList();\r\n\t\treturn this;\r\n\t},\r\n\r\n\tsetupList: function () {\r\n\t\tvar list = this.get('WorkoutList');\r\n\t\tif (!list) {\r\n\t\t\tlist = new WorkoutCollection();\r\n\t\t}\r\n\t},\r\n\r\n\tparse: function(response, options) {\r\n\t\tif (response) {\r\n\t\t\tresponse.WorkoutList = new WorkoutCollection(response.WorkoutList, {parse: true})\r\n\t\t}\r\n\t\treturn response;\r\n\t},\r\n\r\n\tsummarize: function () {\r\n\t\tvar count = this.get('WorkoutList').length;\r\n\t\tvar str = count + ' workout';\r\n\t\tif (count != 1) str += 's';\r\n\t\treturn str;\r\n\t},\r\n\r\n\tView: BaseView.extend({\r\n\t\tclassName: 'cycle ' + BaseView.prototype.className,\r\n\r\n\t\ttemplates: {\r\n\t\t\t'main': 'cycle-view'\r\n\t\t},\r\n\r\n\t\tbindControls: function () {\r\n\t\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\t\tthis.$title = this.$('.title-input');\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar workouts = this.model.get('WorkoutList');\r\n\t\t\t\tworkouts.create({'CycleID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({'Title': this.$title.val()})\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n})\r\n\r\nvar CycleCollection = BaseCollection.extend({\r\n\tmodel: Cycle,\r\n\turl: 'https://peakdev.titustechnologies.com/api/cycles',\r\n\r\n\tinitialize: function () {\r\n\t\t\tBaseCollection.prototype.initialize.call(this);\r\n\t\t\tthis.on('add', this.select.bind(this, null, null))\r\n\t\t\tthis.select();\r\n\t},\r\n\r\n\tselect: function (indexOrModel, options) {\r\n\t\tvar index = ('number' === typeof indexOrModel) ? indexOrModel : this.indexOf(indexOrModel);\r\n\t\tthis.selectedIndex = (0 < index && index < this.length) ? index : 0;\r\n\t\tthis.selected = this.at(this.selectedIndex);\r\n\t\tif (this.selected) this.selected.fetch();\r\n\t},\r\n\r\n\tView: BaseCollectionView.extend({\r\n\t\ttemplates: {\r\n\t\t\t'main': 'cycle-collection-view',\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change .cycle-select': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar render = this.render.bind(this);\r\n\t\t\t\tthis.collection.select(event.currentTarget.selectedIndex, {success: render});\r\n\t\t\t},\r\n\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar render = this.render.bind(this);\r\n\t\t\t\tvar cycle = this.collection.create();\r\n\t\t\t\tvar index = this.collection.indexOf(cycle);\r\n\t\t\t\tthis.collection.select(index, {success: render});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar render = this.render.bind(this);\r\n\t\t\t\tthis.collection.selected.destroy();\r\n\t\t\t\tthis.collection.select(0, {success: render});\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n})\r\n\r\n\r\n// Entry Point\r\n// ===========\r\n$(document).ready(function () {\r\n\twindow.cycles = new CycleCollection();\r\n\tcycles.fetch()\r\n\t\t.done(function () {\r\n\t\t\t$('body').empty().append(cycles.view.el);\r\n\t\t})\r\n})\r\n","markers":{"markers":{"4":{"id":4,"range":[[389,21],[396,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[389,21],[396,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[389,23],[396,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[389,24],[395,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[391,0],[394,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[657,25],[661,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[658,50],[659,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"17":{"id":17,"range":[[658,50],[659,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[658,50],[659,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"24":{"id":24,"range":[[659,10],[659,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"26":{"id":26,"range":[[659,34],[659,51]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"27":{"id":27,"range":[[664,0],[664,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"28":{"id":28,"range":[[664,0],[664,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"29":{"id":29,"range":[[664,0],[664,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"30":{"id":30,"range":[[664,0],[664,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"31":{"id":31,"range":[[667,45],[667,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"33":{"id":33,"range":[[663,43],[664,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"62":{"id":62,"range":[[499,3],[499,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"101":{"id":101,"range":[[634,65],[634,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"102":{"id":102,"range":[[634,65],[634,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"103":{"id":103,"range":[[634,65],[634,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"117":{"id":117,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"120":{"id":120,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"184":{"id":184,"range":[[629,38],[633,49]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"188":{"id":188,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"189":{"id":189,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"191":{"id":191,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"202":{"id":202,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"203":{"id":203,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"204":{"id":204,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"206":{"id":206,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"207":{"id":207,"range":[[598,3],[598,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"211":{"id":211,"range":[[597,34],[597,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"212":{"id":212,"range":[[597,34],[597,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"222":{"id":222,"range":[[497,34],[497,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"223":{"id":223,"range":[[416,4],[416,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"225":{"id":225,"range":[[520,4],[520,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"226":{"id":226,"range":[[520,4],[520,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"227":{"id":227,"range":[[634,20],[634,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"228":{"id":228,"range":[[634,21],[634,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"231":{"id":231,"range":[[9,36],[9,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"242":{"id":242,"range":[[634,66],[634,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"243":{"id":243,"range":[[634,66],[634,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"244":{"id":244,"range":[[631,27],[632,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"256":{"id":256,"range":[[520,4],[520,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"258":{"id":258,"range":[[520,4],[520,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"269":{"id":269,"range":[[520,4],[520,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"277":{"id":277,"range":[[416,4],[416,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"284":{"id":284,"range":[[632,37],[632,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"285":{"id":285,"range":[[634,66],[634,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"288":{"id":288,"range":[[634,48],[634,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"331":{"id":331,"range":[[89,2],[89,2]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"347":{"id":347,"range":[[680,61],[680,71]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"348":{"id":348,"range":[[689,33],[689,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"352":{"id":352,"range":[[699,3],[699,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"353":{"id":353,"range":[[699,3],[699,3]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"354":{"id":354,"range":[[89,2],[89,2]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"1426":{"id":1426,"range":[[641,5],[641,5]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":11,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[709,66],[709,66]],"newRange":[[709,66],[710,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[710,0],[710,0]],"newRange":[[710,0],[710,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,3],[710,3]],"newRange":[[710,3],[710,4]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,4],[710,4]],"newRange":[[710,4],[710,5]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,5],[710,5]],"newRange":[[710,5],[710,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,6],[710,6]],"newRange":[[710,6],[710,7]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,7],[710,7]],"newRange":[[710,7],[710,8]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,8],[710,8]],"newRange":[[710,8],[710,9]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,9],[710,9]],"newRange":[[710,9],[710,10]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,10],[710,10]],"newRange":[[710,10],[710,11]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,11],[710,11]],"newRange":[[710,11],[710,12]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,12],[710,12]],"newRange":[[710,12],[710,13]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,13],[710,13]],"newRange":[[710,13],[710,14]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,14],[710,14]],"newRange":[[710,14],[710,15]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,15],[710,15]],"newRange":[[710,15],[710,16]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,16],[710,16]],"newRange":[[710,16],[710,17]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,17],[710,17]],"newRange":[[710,17],[710,18]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,18],[710,18]],"newRange":[[710,18],[710,19]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,19],[710,19]],"newRange":[[710,19],[710,20]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,20],[710,20]],"newRange":[[710,20],[710,21]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,21],[710,21]],"newRange":[[710,21],[710,22]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,22],[710,22]],"newRange":[[710,22],[710,23]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,23],[710,23]],"newRange":[[710,23],[710,24]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,24],[710,24]],"newRange":[[710,24],[710,25]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,25],[710,25]],"newRange":[[710,25],[710,27]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,27],[710,27]],"newRange":[[710,27],[710,28]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[708,2],[708,2]],"newRange":[[708,2],[708,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[709,2],[709,2]],"newRange":[[709,2],[709,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[710,2],[710,2]],"newRange":[[710,2],[710,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[711,2],[711,2]],"newRange":[[711,2],[711,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[712,2],[712,2]],"newRange":[[712,2],[712,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[713,2],[713,2]],"newRange":[[713,2],[713,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[714,2],[714,2]],"newRange":[[714,2],[714,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[715,2],[715,2]],"newRange":[[715,2],[715,5]],"oldText":"","newText":"// ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[657,57],[657,57]],"newRange":[[657,57],[658,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[658,0],[658,0]],"newRange":[[658,0],[658,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[658,1],[658,1]],"newRange":[[658,1],[659,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[659,0],[659,0]],"newRange":[[659,0],[659,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,1],[659,1]],"newRange":[[659,1],[659,2]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,2],[659,2]],"newRange":[[659,2],[659,3]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,3],[659,3]],"newRange":[[659,3],[659,4]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,4],[659,4]],"newRange":[[659,4],[659,5]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[659,5],[659,5]]},"newParams":{"range":[[659,4],[659,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[659,4],[659,5]],"newRange":[[659,4],[659,4]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[659,4],[659,4]]},"newParams":{"range":[[659,3],[659,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[659,3],[659,4]],"newRange":[[659,3],[659,3]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[659,3],[659,3]]},"newParams":{"range":[[659,2],[659,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[659,2],[659,3]],"newRange":[[659,2],[659,2]],"oldText":"h","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[659,2],[659,2]]},"newParams":{"range":[[659,1],[659,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[659,1],[659,2]],"newRange":[[659,1],[659,1]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[659,1],[659,1]]},"newParams":{"range":[[659,0],[659,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[659,0],[659,1]],"newRange":[[659,0],[659,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,0],[659,0]],"newRange":[[659,0],[659,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,1],[659,1]],"newRange":[[659,1],[659,2]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,2],[659,2]],"newRange":[[659,2],[659,3]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,3],[659,3]],"newRange":[[659,3],[659,4]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,4],[659,4]],"newRange":[[659,4],[659,5]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,5],[659,5]],"newRange":[[659,5],[659,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,6],[659,6]],"newRange":[[659,6],[659,7]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,7],[659,7]],"newRange":[[659,7],[659,8]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,8],[659,8]],"newRange":[[659,8],[659,9]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,9],[659,9]],"newRange":[[659,9],[659,10]],"oldText":"","newText":"z","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,10],[659,10]],"newRange":[[659,10],[659,11]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,11],[659,11]],"newRange":[[659,11],[659,12]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,12],[659,12]],"newRange":[[659,12],[659,13]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,13],[659,13]],"newRange":[[659,13],[659,14]],"oldText":"","newText":"f","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,14],[659,14]],"newRange":[[659,14],[659,15]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,15],[659,15]],"newRange":[[659,15],[659,16]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,16],[659,16]],"newRange":[[659,16],[659,17]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,17],[659,17]],"newRange":[[659,17],[659,18]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,18],[659,18]],"newRange":[[659,18],[659,19]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,19],[659,19]],"newRange":[[659,19],[659,20]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,20],[659,20]],"newRange":[[659,20],[659,21]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,21],[659,21]],"newRange":[[659,21],[659,22]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,22],[659,22]],"newRange":[[659,22],[659,24]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,24],[659,24]],"newRange":[[659,24],[659,25]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,25],[659,25]],"newRange":[[659,25],[659,27]],"oldText":"","newText":"{}","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[659,26],[659,26]],"newRange":[[659,26],[661,0]],"oldText":"","newText":"\n\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"range":[[661,0],[661,0]]},"newParams":{"range":[[660,0],[660,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,0],[660,0]],"newRange":[[660,0],[660,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[661,0],[661,0]],"newRange":[[661,0],[661,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,2],[661,2]],"newRange":[[661,2],[661,3]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"range":[[660,1],[660,1]]},"newParams":{"range":[[660,2],[660,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,2],[660,2]],"newRange":[[660,2],[660,3]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,3],[660,3]],"newRange":[[660,3],[660,4]],"oldText":"","newText":"B","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,4],[660,4]],"newRange":[[660,4],[660,5]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,5],[660,5]],"newRange":[[660,5],[660,6]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,6],[660,6]],"newRange":[[660,6],[660,7]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,7],[660,7]],"newRange":[[660,7],[660,8]],"oldText":"","newText":"C","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,8],[660,8]],"newRange":[[660,8],[660,9]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,9],[660,9]],"newRange":[[660,9],[660,10]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,10],[660,10]],"newRange":[[660,10],[660,11]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,11],[660,11]],"newRange":[[660,11],[660,12]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,12],[660,12]],"newRange":[[660,12],[660,13]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,13],[660,13]],"newRange":[[660,13],[660,14]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,14],[660,14]],"newRange":[[660,14],[660,15]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,15],[660,15]],"newRange":[[660,15],[660,16]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,16],[660,16]],"newRange":[[660,16],[660,17]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,17],[660,17]],"newRange":[[660,17],[660,18]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,18],[660,18]],"newRange":[[660,18],[660,19]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,19],[660,19]],"newRange":[[660,19],[660,20]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,20],[660,20]],"newRange":[[660,20],[660,21]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,21],[660,21]],"newRange":[[660,21],[660,22]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,22],[660,22]],"newRange":[[660,22],[660,23]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[660,23],[660,23]]},"newParams":{"range":[[660,22],[660,23]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,22],[660,23]],"newRange":[[660,22],[660,22]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[660,22],[660,22]]},"newParams":{"range":[[660,21],[660,22]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,21],[660,22]],"newRange":[[660,21],[660,21]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[660,21],[660,21]]},"newParams":{"range":[[660,20],[660,21]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,20],[660,21]],"newRange":[[660,20],[660,20]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[660,20],[660,20]]},"newParams":{"range":[[660,19],[660,20]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,19],[660,20]],"newRange":[[660,19],[660,19]],"oldText":"n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[660,19],[660,19]]},"newParams":{"range":[[660,18],[660,19]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,18],[660,19]],"newRange":[[660,18],[660,18]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,18],[660,18]],"newRange":[[660,18],[660,19]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,19],[660,19]],"newRange":[[660,19],[660,20]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,20],[660,20]],"newRange":[[660,20],[660,21]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,21],[660,21]],"newRange":[[660,21],[660,22]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,22],[660,22]],"newRange":[[660,22],[660,23]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,23],[660,23]],"newRange":[[660,23],[660,24]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,24],[660,24]],"newRange":[[660,24],[660,25]],"oldText":"","newText":"y","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,25],[660,25]],"newRange":[[660,25],[660,26]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,26],[660,26]],"newRange":[[660,26],[660,27]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,27],[660,27]],"newRange":[[660,27],[660,28]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,28],[660,28]],"newRange":[[660,28],[660,29]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,29],[660,29]],"newRange":[[660,29],[660,30]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,30],[660,30]],"newRange":[[660,30],[660,31]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,31],[660,31]],"newRange":[[660,31],[660,32]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,32],[660,32]],"newRange":[[660,32],[660,33]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,33],[660,33]],"newRange":[[660,33],[660,34]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,34],[660,34]],"newRange":[[660,34],[660,35]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,35],[660,35]],"newRange":[[660,35],[660,36]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,36],[660,36]],"newRange":[[660,36],[660,37]],"oldText":"","newText":"z","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,37],[660,37]],"newRange":[[660,37],[660,38]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,38],[660,38]],"newRange":[[660,38],[660,39]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,39],[660,39]],"newRange":[[660,39],[660,40]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,40],[660,40]],"newRange":[[660,40],[660,41]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,41],[660,41]],"newRange":[[660,41],[660,42]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,42],[660,42]],"newRange":[[660,42],[660,43]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,43],[660,43]],"newRange":[[660,43],[660,45]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,44],[660,44]],"newRange":[[660,44],[660,45]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,45],[660,45]],"newRange":[[660,45],[660,46]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,46],[660,46]],"newRange":[[660,46],[660,47]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,47],[660,47]],"newRange":[[660,47],[660,48]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,49],[660,49]],"newRange":[[660,49],[660,50]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,50],[660,50]],"newRange":[[660,50],[661,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[661,0],[661,0]],"newRange":[[661,0],[661,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,3],[661,3]],"newRange":[[661,3],[661,4]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,4],[661,4]],"newRange":[[661,4],[661,5]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,5],[661,5]],"newRange":[[661,5],[661,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,6],[661,6]],"newRange":[[661,6],[661,7]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,7],[661,7]],"newRange":[[661,7],[661,8]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,8],[661,8]],"newRange":[[661,8],[661,9]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,9],[661,9]],"newRange":[[661,9],[661,10]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,10],[661,10]],"newRange":[[661,10],[661,12]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,11],[661,11]],"newRange":[[661,11],[661,13]],"oldText":"","newText":"''","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,12],[661,12]],"newRange":[[661,12],[661,13]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,13],[661,13]],"newRange":[[661,13],[661,14]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,14],[661,14]],"newRange":[[661,14],[661,15]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,15],[661,15]],"newRange":[[661,15],[661,16]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,16],[661,16]],"newRange":[[661,16],[661,17]],"oldText":"","newText":"g","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,17],[661,17]],"newRange":[[661,17],[661,18]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,19],[661,19]],"newRange":[[661,19],[661,20]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,20],[661,20]],"newRange":[[661,20],[661,21]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,21],[661,21]],"newRange":[[661,21],[661,22]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,22],[661,22]],"newRange":[[661,22],[661,23]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,23],[661,23]],"newRange":[[661,23],[661,24]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,24],[661,24]],"newRange":[[661,24],[661,25]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,25],[661,25]],"newRange":[[661,25],[661,26]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,26],[661,26]],"newRange":[[661,26],[661,27]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,27],[661,27]],"newRange":[[661,27],[661,28]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,28],[661,28]],"newRange":[[661,28],[661,29]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,29],[661,29]],"newRange":[[661,29],[661,30]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,30],[661,30]],"newRange":[[661,30],[661,31]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,31],[661,31]],"newRange":[[661,31],[661,32]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,33],[661,33]],"newRange":[[661,33],[661,34]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":true,"range":[[661,8],[661,10]]},"newParams":{"range":[[661,10],[661,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,8],[661,10]],"newRange":[[661,8],[661,9]],"oldText":"on","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,9],[661,9]],"newRange":[[661,9],[661,10]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,10],[661,10]],"newRange":[[661,10],[661,11]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,11],[661,11]],"newRange":[[661,11],[661,12]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,12],[661,12]],"newRange":[[661,12],[661,13]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,13],[661,13]],"newRange":[[661,13],[661,14]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,14],[661,14]],"newRange":[[661,14],[661,15]],"oldText":"","newText":"T","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,15],[661,15]],"newRange":[[661,15],[661,16]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,16],[661,16]]},"newParams":{"reversed":true,"range":[[661,15],[661,16]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,15],[661,16]],"newRange":[[661,15],[661,15]],"oldText":"o","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,15],[661,15]]},"newParams":{"range":[[661,14],[661,15]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,14],[661,15]],"newRange":[[661,14],[661,14]],"oldText":"T","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,14],[661,14]]},"newParams":{"range":[[661,13],[661,14]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,13],[661,14]],"newRange":[[661,13],[661,13]],"oldText":"n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,13],[661,13]]},"newParams":{"range":[[661,12],[661,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,12],[661,13]],"newRange":[[661,12],[661,12]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,12],[661,12]]},"newParams":{"range":[[661,11],[661,12]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,11],[661,12]],"newRange":[[661,11],[661,11]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,11],[661,11]]},"newParams":{"range":[[661,10],[661,11]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,10],[661,11]],"newRange":[[661,10],[661,10]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,10],[661,10]]},"newParams":{"range":[[661,9],[661,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,9],[661,10]],"newRange":[[661,9],[661,9]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,9],[661,9]]},"newParams":{"range":[[661,8],[661,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,8],[661,9]],"newRange":[[661,8],[661,8]],"oldText":"l","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,8],[661,8]],"newRange":[[661,8],[661,9]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,9],[661,9]],"newRange":[[661,9],[661,10]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,34],[661,34]],"newRange":[[661,34],[662,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[662,0],[662,0]],"newRange":[[662,0],[662,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,3],[662,3]],"newRange":[[662,3],[662,4]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,4],[662,4]],"newRange":[[662,4],[662,5]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,5],[662,5]],"newRange":[[662,5],[662,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,6],[662,6]],"newRange":[[662,6],[662,7]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,7],[662,7]],"newRange":[[662,7],[662,8]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,8],[662,8]],"newRange":[[662,8],[662,9]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,9],[662,9]],"newRange":[[662,9],[662,10]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,10],[662,10]],"newRange":[[662,10],[662,11]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,11],[662,11]],"newRange":[[662,11],[662,12]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,12],[662,12]],"newRange":[[662,12],[662,13]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,13],[662,13]],"newRange":[[662,13],[662,14]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,14],[662,14]],"newRange":[[662,14],[662,15]],"oldText":"","newText":")","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[662,15],[662,15]]},"newParams":{"range":[[662,14],[662,15]]},"deserializer":"MarkerPatch"},{"oldRange":[[662,14],[662,15]],"newRange":[[662,14],[662,14]],"oldText":")","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,14],[662,14]],"newRange":[[662,14],[662,16]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,16],[662,16]],"newRange":[[662,16],[662,17]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[658,0],[658,1]],"newRange":[[658,0],[658,0]],"oldText":"\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,18],[661,18]],"newRange":[[661,18],[661,19]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,19],[661,19]],"newRange":[[661,19],[661,20]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,20],[661,20]],"newRange":[[661,20],[661,21]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,21],[661,21]],"newRange":[[661,21],[661,22]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,22],[661,22]],"newRange":[[661,22],[661,23]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,23],[661,23]],"newRange":[[661,23],[661,24]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,40],[661,40]],"newRange":[[661,40],[662,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[662,0],[662,0]],"newRange":[[662,0],[662,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,3],[662,3]],"newRange":[[662,3],[662,4]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,4],[662,4]],"newRange":[[662,4],[662,5]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,5],[662,5]],"newRange":[[662,5],[662,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,6],[662,6]],"newRange":[[662,6],[662,7]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,7],[662,7]],"newRange":[[662,7],[662,8]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,8],[662,8]],"newRange":[[662,8],[662,9]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,9],[662,9]],"newRange":[[662,9],[662,10]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,10],[662,10]],"newRange":[[662,10],[662,12]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,11],[662,11]],"newRange":[[662,11],[662,13]],"oldText":"","newText":"''","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,12],[662,12]],"newRange":[[662,12],[662,13]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,13],[662,13]],"newRange":[[662,13],[662,14]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,14],[662,14]],"newRange":[[662,14],[662,15]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,16],[662,16]],"newRange":[[662,16],[662,17]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,17],[662,17]],"newRange":[[662,17],[662,18]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,18],[662,18]],"newRange":[[662,18],[662,19]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,19],[662,19]],"newRange":[[662,19],[662,20]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[662,21],[662,21]]},"newParams":{"range":[[662,0],[662,21]]},"deserializer":"MarkerPatch"},{"oldRange":[[662,0],[662,21]],"newRange":[[662,0],[662,0]],"oldText":"\t\t\tthis.on('all', at)","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[662,0],[662,0]]},"newParams":{"range":[[661,40],[662,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,40],[662,0]],"newRange":[[661,40],[661,40]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,40],[661,40]]},"newParams":{"range":[[661,0],[661,40]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,0],[661,40]],"newRange":[[661,0],[661,0]],"oldText":"\t\t\tthis.on('change reset', this.select);","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[661,0],[661,0]]},"newParams":{"range":[[660,50],[661,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[660,50],[661,0]],"newRange":[[660,50],[660,50]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,17],[661,17]],"newRange":[[661,17],[662,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[662,0],[662,0]],"newRange":[[662,0],[662,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,3],[662,3]],"newRange":[[662,3],[662,4]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,4],[662,4]],"newRange":[[662,4],[662,5]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,5],[662,5]],"newRange":[[662,5],[662,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,6],[662,6]],"newRange":[[662,6],[662,7]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,7],[662,7]],"newRange":[[662,7],[662,8]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,8],[662,8]],"newRange":[[662,8],[662,9]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,9],[662,9]],"newRange":[[662,9],[662,10]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,10],[662,10]],"newRange":[[662,10],[662,11]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,11],[662,11]],"newRange":[[662,11],[662,12]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,12],[662,12]],"newRange":[[662,12],[662,13]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,13],[662,13]],"newRange":[[662,13],[662,14]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,14],[662,14]],"newRange":[[662,14],[662,15]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,15],[662,15]],"newRange":[[662,15],[662,16]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,16],[662,16]],"newRange":[[662,16],[662,17]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,17],[662,17]],"newRange":[[662,17],[662,18]],"oldText":"","newText":"f","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,18],[662,18]],"newRange":[[662,18],[662,19]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,19],[662,19]],"newRange":[[662,19],[662,20]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,20],[662,20]],"newRange":[[662,20],[662,21]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,21],[662,21]],"newRange":[[662,21],[662,22]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,22],[662,22]],"newRange":[[662,22],[662,24]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[662,24],[662,24]],"newRange":[[662,24],[662,25]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[662,25],[662,25]]},"newParams":{"range":[[662,0],[662,25]]},"deserializer":"MarkerPatch"},{"oldRange":[[662,0],[662,25]],"newRange":[[662,0],[662,0]],"oldText":"\t\t\tthis.selected.fetch();","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[662,0],[662,0]]},"newParams":{"range":[[661,17],[662,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[661,17],[662,0]],"newRange":[[661,17],[661,17]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[676,46],[676,46]],"newRange":[[676,46],[677,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[677,0],[677,0]],"newRange":[[677,0],[677,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,2],[677,2]],"newRange":[[677,2],[677,3]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,3],[677,3]],"newRange":[[677,3],[677,4]],"oldText":"","newText":"f","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,4],[677,4]],"newRange":[[677,4],[677,5]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,5],[677,5]],"newRange":[[677,5],[677,7]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,6],[677,6]],"newRange":[[677,6],[677,7]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,7],[677,7]],"newRange":[[677,7],[677,8]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,8],[677,8]],"newRange":[[677,8],[677,9]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,9],[677,9]],"newRange":[[677,9],[677,10]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,10],[677,10]],"newRange":[[677,10],[677,11]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,11],[677,11]],"newRange":[[677,11],[677,12]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,12],[677,12]],"newRange":[[677,12],[677,13]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,13],[677,13]],"newRange":[[677,13],[677,14]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,14],[677,14]],"newRange":[[677,14],[677,15]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,15],[677,15]],"newRange":[[677,15],[677,16]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,16],[677,16]],"newRange":[[677,16],[677,17]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,17],[677,17]],"newRange":[[677,17],[677,18]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,18],[677,18]],"newRange":[[677,18],[677,19]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,20],[677,20]],"newRange":[[677,20],[677,21]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,21],[677,21]],"newRange":[[677,21],[677,22]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,22],[677,22]],"newRange":[[677,22],[677,23]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,23],[677,23]],"newRange":[[677,23],[677,24]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,24],[677,24]],"newRange":[[677,24],[677,25]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,25],[677,25]],"newRange":[[677,25],[677,26]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,26],[677,26]],"newRange":[[677,26],[677,27]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,27],[677,27]],"newRange":[[677,27],[677,28]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,28],[677,28]],"newRange":[[677,28],[677,29]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,29],[677,29]],"newRange":[[677,29],[677,30]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,30],[677,30]],"newRange":[[677,30],[677,31]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,31],[677,31]],"newRange":[[677,31],[677,32]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,32],[677,32]],"newRange":[[677,32],[677,33]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,33],[677,33]],"newRange":[[677,33],[677,34]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,34],[677,34]],"newRange":[[677,34],[677,35]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,35],[677,35]],"newRange":[[677,35],[677,36]],"oldText":"","newText":"f","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,36],[677,36]],"newRange":[[677,36],[677,37]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,37],[677,37]],"newRange":[[677,37],[677,38]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,38],[677,38]],"newRange":[[677,38],[677,39]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,39],[677,39]],"newRange":[[677,39],[677,40]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,40],[677,40]],"newRange":[[677,40],[677,42]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[677,42],[677,42]],"newRange":[[677,42],[677,43]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,31],[664,31]],"newRange":[[664,31],[664,32]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,32],[664,32]],"newRange":[[664,32],[664,33]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,33],[664,33]],"newRange":[[664,33],[664,34]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,34],[664,34]],"newRange":[[664,34],[664,35]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,35],[664,35]],"newRange":[[664,35],[664,36]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,36],[664,36]],"newRange":[[664,36],[664,37]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,37],[664,37]],"newRange":[[664,37],[664,38]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,38],[664,38]],"newRange":[[664,38],[664,39]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[664,39],[664,39]],"newRange":[[664,39],[664,40]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":true,"range":[[690,60],[691,35]]},"newParams":{"tailed":false,"range":[[690,60],[690,60]]},"deserializer":"MarkerPatch"},{"oldRange":[[690,60],[691,35]],"newRange":[[690,60],[690,61]],"oldText":");\r\n\t\t\t\tthis.collection.selected.fetch(","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"range":[[690,60],[690,60]]},"newParams":{"range":[[690,61],[690,61]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[690,61],[690,61]],"newRange":[[690,61],[690,62]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":true,"range":[[699,32],[700,35]]},"newParams":{"tailed":false,"range":[[699,32],[699,32]]},"deserializer":"MarkerPatch"},{"oldRange":[[699,32],[700,35]],"newRange":[[699,32],[699,33]],"oldText":");\r\n\t\t\t\tthis.collection.selected.fetch(","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"range":[[699,32],[699,32]]},"newParams":{"range":[[699,33],[699,33]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[699,33],[699,33]],"newRange":[[699,33],[699,34]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":true,"range":[[707,28],[708,35]]},"newParams":{"tailed":false,"range":[[707,28],[707,28]]},"deserializer":"MarkerPatch"},{"oldRange":[[707,28],[708,35]],"newRange":[[707,28],[707,29]],"oldText":");\r\n\t\t\t\tthis.collection.selected.fetch(","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"range":[[707,28],[707,28]]},"newParams":{"range":[[707,29],[707,29]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[707,29],[707,29]],"newRange":[[707,29],[707,30]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[660,50],[660,50]],"newRange":[[660,50],[661,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[661,0],[661,0]],"newRange":[[661,0],[661,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,3],[661,3]],"newRange":[[661,3],[661,4]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,4],[661,4]],"newRange":[[661,4],[661,5]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,5],[661,5]],"newRange":[[661,5],[661,6]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,6],[661,6]],"newRange":[[661,6],[661,7]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,7],[661,7]],"newRange":[[661,7],[661,8]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,8],[661,8]],"newRange":[[661,8],[661,9]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,9],[661,9]],"newRange":[[661,9],[661,10]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,10],[661,10]],"newRange":[[661,10],[661,12]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,11],[661,11]],"newRange":[[661,11],[661,13]],"oldText":"","newText":"''","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,12],[661,12]],"newRange":[[661,12],[661,13]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,13],[661,13]],"newRange":[[661,13],[661,14]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,14],[661,14]],"newRange":[[661,14],[661,15]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,16],[661,16]],"newRange":[[661,16],[661,17]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,17],[661,17]],"newRange":[[661,17],[661,18]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,18],[661,18]],"newRange":[[661,18],[661,19]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,19],[661,19]],"newRange":[[661,19],[661,20]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,20],[661,20]],"newRange":[[661,20],[661,21]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,21],[661,21]],"newRange":[[661,21],[661,22]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,22],[661,22]],"newRange":[[661,22],[661,23]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,23],[661,23]],"newRange":[[661,23],[661,24]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,24],[661,24]],"newRange":[[661,24],[661,25]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,25],[661,25]],"newRange":[[661,25],[661,26]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,26],[661,26]],"newRange":[[661,26],[661,27]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,27],[661,27]],"newRange":[[661,27],[661,28]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,28],[661,28]],"newRange":[[661,28],[661,29]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,29],[661,29]],"newRange":[[661,29],[661,30]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,30],[661,30]],"newRange":[[661,30],[661,31]],"oldText":"","newText":"b","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,31],[661,31]],"newRange":[[661,31],[661,32]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,32],[661,32]],"newRange":[[661,32],[661,33]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,33],[661,33]],"newRange":[[661,33],[661,34]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,34],[661,34]],"newRange":[[661,34],[661,36]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,35],[661,35]],"newRange":[[661,35],[661,36]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,36],[661,36]],"newRange":[[661,36],[661,37]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,37],[661,37]],"newRange":[[661,37],[661,38]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,38],[661,38]],"newRange":[[661,38],[661,39]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,39],[661,39]],"newRange":[[661,39],[661,40]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,40],[661,40]],"newRange":[[661,40],[661,41]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,41],[661,41]],"newRange":[[661,41],[661,42]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,42],[661,42]],"newRange":[[661,42],[661,43]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,43],[661,43]],"newRange":[[661,43],[661,44]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,44],[661,44]],"newRange":[[661,44],[661,45]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,35],[661,35]],"newRange":[[661,35],[661,36]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,36],[661,36]],"newRange":[[661,36],[661,37]],"oldText":"","newText":"h","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,37],[661,37]],"newRange":[[661,37],[661,38]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,38],[661,38]],"newRange":[[661,38],[661,39]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,39],[661,39]],"newRange":[[661,39],[661,40]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[661,40],[661,40]],"newRange":[[661,40],[661,41]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[710,4],[719,6]],"newRange":[[710,4],[710,4]],"oldText":"\r\n\r\n\t\t// initialize: function () {\r\n\t\t// \tBaseCollectionView.prototype.initialize.apply(this, arguments);\r\n\t\t// \tthis.collection.select();\r\n\t\t// \tvar render = this.render.bind(this);\r\n\t\t// \tvar fetchSelected = this.collection.selected.fetch.bind(this.collection.selected, {success: render});\r\n\t\t// \tthis.collection.fetch({success: fetchSelected});\r\n\t\t// \treturn this;\r\n\t\t// }","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[710,4],[710,4]]},"newParams":{"range":[[710,3],[710,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[710,3],[710,4]],"newRange":[[710,3],[710,3]],"oldText":",","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"reversed":false,"range":[[669,3],[669,3]]},"newParams":{"reversed":true,"range":[[669,0],[669,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,0],[669,3]],"newRange":[[669,0],[669,0]],"oldText":"\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[669,0],[669,0]]},"newParams":{"range":[[668,47],[669,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[668,47],[669,0]],"newRange":[[668,47],[668,47]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[668,47],[668,47]]},"newParams":{"range":[[668,46],[668,47]]},"deserializer":"MarkerPatch"},{"oldRange":[[668,46],[668,47]],"newRange":[[668,46],[668,46]],"oldText":"{","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[669,4],[669,4]]},"newParams":{"range":[[669,3],[669,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,3],[669,4]],"newRange":[[669,3],[669,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[669,3],[669,3]]},"newParams":{"range":[[669,2],[669,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,2],[669,3]],"newRange":[[669,2],[669,2]],"oldText":"}","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,3],[670,3]]},"newParams":{"range":[[670,0],[670,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,0],[670,3]],"newRange":[[670,0],[670,0]],"oldText":"\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,0],[670,0]]},"newParams":{"range":[[669,46],[670,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,46],[670,0]],"newRange":[[669,46],[669,46]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[669,46],[669,46]]},"newParams":{"range":[[669,45],[669,46]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,45],[669,46]],"newRange":[[669,45],[669,45]],"oldText":"{","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,10],[670,10]]},"newParams":{"range":[[670,9],[670,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,9],[670,10]],"newRange":[[670,9],[670,9]],"oldText":"{","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,9],[670,9]]},"newParams":{"range":[[670,8],[670,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,8],[670,9]],"newRange":[[670,8],[670,8]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,4],[670,4]]},"newParams":{"range":[[670,3],[670,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,3],[670,4]],"newRange":[[670,3],[670,3]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,3],[670,3]]},"newParams":{"range":[[670,2],[670,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,2],[670,3]],"newRange":[[670,2],[670,2]],"oldText":"}","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[671,3],[671,3]]},"newParams":{"range":[[671,0],[671,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[671,0],[671,3]],"newRange":[[671,0],[671,0]],"oldText":"\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[671,0],[671,0]]},"newParams":{"range":[[670,6],[671,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,6],[671,0]],"newRange":[[670,6],[670,6]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[670,6],[670,6]],"newRange":[[670,6],[670,7]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[671,3],[671,3]]},"newParams":{"range":[[671,0],[671,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[671,0],[671,3]],"newRange":[[671,0],[671,0]],"oldText":"\t\t}","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[671,0],[671,0]]},"newParams":{"range":[[670,34],[671,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,34],[671,0]],"newRange":[[670,34],[670,34]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,2],[669,7]],"newRange":[[669,2],[669,2]],"oldText":"else ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[668,2],[668,73]],"newRange":[[668,2],[668,2]],"oldText":"if (indexOrModel instanceof Backbone.Model) index = this.indexOf(index)","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"reversed":false,"range":[[668,2],[668,2]]},"newParams":{"reversed":true,"range":[[668,0],[668,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[668,0],[668,2]],"newRange":[[668,0],[668,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[668,0],[668,0]]},"newParams":{"range":[[667,0],[668,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[667,0],[668,0]],"newRange":[[667,0],[667,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[668,61],[668,61]],"newRange":[[668,61],[669,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[669,0],[669,0]],"newRange":[[669,0],[669,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,2],[669,2]],"newRange":[[669,2],[669,73]],"oldText":"","newText":"if (indexOrModel instanceof Backbone.Model) index = this.indexOf(index)","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,2],[669,2]],"newRange":[[669,2],[669,3]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,3],[669,3]],"newRange":[[669,3],[669,4]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,4],[669,4]],"newRange":[[669,4],[669,5]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,5],[669,5]],"newRange":[[669,5],[669,6]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,6],[669,6]],"newRange":[[669,6],[669,7]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[670,34],[670,34]],"newRange":[[670,34],[671,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[671,0],[671,0]],"newRange":[[671,0],[671,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[671,2],[671,2]],"newRange":[[671,2],[672,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[672,0],[672,0]],"newRange":[[672,0],[672,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[670,2],[670,2]],"newRange":[[670,2],[670,3]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[670,3],[670,3]],"newRange":[[670,3],[670,4]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,7],[669,7]],"newRange":[[669,7],[669,8]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,8],[669,8]],"newRange":[[669,8],[669,9]],"oldText":"","newText":"*","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,52],[669,52]],"newRange":[[669,52],[669,53]],"oldText":"","newText":"*","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,53],[669,53]],"newRange":[[669,53],[669,54]],"oldText":"","newText":"/","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[672,0],[672,2]],"newRange":[[672,0],[672,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[671,0],[671,2]],"newRange":[[671,0],[671,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,24],[674,24]],"newRange":[[674,24],[674,25]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[674,25],[674,25]]},"newParams":{"range":[[674,24],[674,25]]},"deserializer":"MarkerPatch"},{"oldRange":[[674,24],[674,25]],"newRange":[[674,24],[674,24]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,24],[674,24]],"newRange":[[674,24],[674,25]],"oldText":"","newText":"-","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,25],[674,25]],"newRange":[[674,25],[674,26]],"oldText":"","newText":"1","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,26],[674,26]],"newRange":[[674,26],[674,27]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,27],[674,27]],"newRange":[[674,27],[674,28]],"oldText":"","newText":"<","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,28],[674,28]],"newRange":[[674,28],[674,29]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,29],[674,29]],"newRange":[[674,29],[674,30]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,30],[674,30]],"newRange":[[674,30],[674,31]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,31],[674,31]],"newRange":[[674,31],[674,32]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,32],[674,32]],"newRange":[[674,32],[674,33]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,33],[674,33]],"newRange":[[674,33],[674,34]],"oldText":"","newText":"x","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,34],[674,34]],"newRange":[[674,34],[674,35]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,35],[674,35]],"newRange":[[674,35],[674,36]],"oldText":"","newText":"&","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,36],[674,36]],"newRange":[[674,36],[674,37]],"oldText":"","newText":"&","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,37],[674,37]],"newRange":[[674,37],[674,38]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[674,26],[674,26]]},"newParams":{"range":[[674,25],[674,26]]},"deserializer":"MarkerPatch"},{"oldRange":[[674,25],[674,26]],"newRange":[[674,25],[674,25]],"oldText":"1","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[674,25],[674,25]]},"newParams":{"range":[[674,24],[674,25]]},"deserializer":"MarkerPatch"},{"oldRange":[[674,24],[674,25]],"newRange":[[674,24],[674,24]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,24],[674,24]],"newRange":[[674,24],[674,25]],"oldText":"","newText":"0","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[674,27],[674,27]],"newRange":[[674,27],[674,28]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[674,28],[674,28]]},"newParams":{"range":[[674,27],[674,28]]},"deserializer":"MarkerPatch"},{"oldRange":[[674,27],[674,28]],"newRange":[[674,27],[674,27]],"oldText":"=","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[673,0],[673,0]]},"newParams":{"range":[[672,0],[673,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[672,0],[673,0]],"newRange":[[672,0],[672,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[672,0],[672,0]]},"newParams":{"range":[[671,0],[672,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[671,0],[672,0]],"newRange":[[671,0],[671,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,36],[670,36]]},"newParams":{"range":[[670,0],[670,36]]},"deserializer":"MarkerPatch"},{"oldRange":[[670,0],[670,36]],"newRange":[[670,0],[670,0]],"oldText":"\t\t//else index = this.selectedIndex;","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[670,0],[670,0]]},"newParams":{"range":[[669,82],[670,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,82],[670,0]],"newRange":[[669,82],[669,82]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[669,7],[669,55]],"newRange":[[669,7],[669,7]],"oldText":"/*if (indexOrModel instanceof Backbone.Model)*/ ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[668,16],[668,16]]},"newParams":{"range":[[668,15],[668,16]]},"deserializer":"MarkerPatch"},{"oldRange":[[668,15],[668,16]],"newRange":[[668,15],[668,15]],"oldText":"=","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[668,15],[668,15]],"newRange":[[668,15],[668,16]],"oldText":"","newText":"!","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[668,48],[668,48]],"newRange":[[668,48],[668,67]],"oldText":"","newText":"this.indexOf(index)","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[668,67],[668,67]],"newRange":[[668,67],[668,68]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[668,68],[668,81]],"newRange":[[668,68],[668,68]],"oldText":"indexOrModel;","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"reversed":false,"range":[[669,34],[669,34]]},"newParams":{"reversed":true,"range":[[669,0],[669,34]]},"deserializer":"MarkerPatch"},{"oldRange":[[669,0],[669,34]],"newRange":[[669,0],[669,0]],"oldText":"\t\telse index = this.indexOf(index)","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[669,0],[669,0]]},"newParams":{"range":[[668,68],[669,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[668,68],[669,0]],"newRange":[[668,68],[668,68]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[666,12],[666,12]]},"newParams":{"range":[[666,11],[666,12]]},"deserializer":"MarkerPatch"},{"oldRange":[[666,11],[666,12]],"newRange":[[666,11],[666,11]],"oldText":";","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,11],[666,11]],"newRange":[[666,11],[666,12]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,12],[666,12]],"newRange":[[666,12],[666,13]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,13],[666,13]],"newRange":[[666,13],[666,14]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,14],[666,14]],"newRange":[[666,14],[666,15]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,15],[666,15]],"newRange":[[666,15],[666,16]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,16],[666,16]],"newRange":[[666,16],[666,17]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,17],[666,17]],"newRange":[[666,17],[666,18]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,18],[666,18]],"newRange":[[666,18],[666,19]],"oldText":"","newText":"x","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,19],[666,19]],"newRange":[[666,19],[666,20]],"oldText":"","newText":"O","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,20],[666,20]],"newRange":[[666,20],[666,21]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,21],[666,21]],"newRange":[[666,21],[666,22]],"oldText":"","newText":"M","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,22],[666,22]],"newRange":[[666,22],[666,23]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,23],[666,23]],"newRange":[[666,23],[666,24]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,24],[666,24]],"newRange":[[666,24],[666,25]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,25],[666,25]],"newRange":[[666,25],[666,26]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,26],[666,26]],"newRange":[[666,26],[666,27]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[666,27],[666,27]]},"newParams":{"range":[[666,0],[666,27]]},"deserializer":"MarkerPatch"},{"oldRange":[[666,0],[666,27]],"newRange":[[666,0],[666,0]],"oldText":"\t\tvar index = indexOrModel;","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[666,0],[666,0]]},"newParams":{"range":[[665,43],[666,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[665,43],[666,0]],"newRange":[[665,43],[665,43]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,0],[666,0]],"newRange":[[666,0],[666,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,2],[666,2]],"newRange":[[666,2],[666,3]],"oldText":"","newText":"v","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,3],[666,3]],"newRange":[[666,3],[666,4]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,4],[666,4]],"newRange":[[666,4],[666,5]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,5],[666,5]],"newRange":[[666,5],[666,6]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,6],[666,6]],"newRange":[[666,6],[666,7]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,7],[666,7]],"newRange":[[666,7],[666,8]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,8],[666,8]],"newRange":[[666,8],[666,9]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,9],[666,9]],"newRange":[[666,9],[666,10]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,10],[666,10]],"newRange":[[666,10],[666,11]],"oldText":"","newText":"x","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,11],[666,11]],"newRange":[[666,11],[666,12]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,12],[666,12]],"newRange":[[666,12],[666,13]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,13],[666,13]],"newRange":[[666,13],[666,14]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,14],[666,14]],"newRange":[[666,14],[666,15]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,15],[666,15]],"newRange":[[666,15],[666,16]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,16],[666,16]],"newRange":[[666,16],[666,17]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,17],[666,17]],"newRange":[[666,17],[666,18]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,18],[666,18]],"newRange":[[666,18],[666,19]],"oldText":"","newText":"x","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,19],[666,19]],"newRange":[[666,19],[666,20]],"oldText":"","newText":"O","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,20],[666,20]],"newRange":[[666,20],[666,21]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,21],[666,21]],"newRange":[[666,21],[666,22]],"oldText":"","newText":"M","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,22],[666,22]],"newRange":[[666,22],[666,23]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,23],[666,23]],"newRange":[[666,23],[666,24]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,24],[666,24]],"newRange":[[666,24],[666,25]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,25],[666,25]],"newRange":[[666,25],[666,26]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,26],[666,26]],"newRange":[[666,26],[666,27]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"reversed":false,"range":[[668,0],[668,0]]},"newParams":{"reversed":true,"range":[[667,68],[668,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[667,68],[668,0]],"newRange":[[667,68],[667,68]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":true,"range":[[667,26],[667,38]]},"newParams":{"tailed":false,"range":[[667,38],[667,38]]},"deserializer":"MarkerPatch"},{"oldRange":[[667,26],[667,38]],"newRange":[[667,26],[667,27]],"oldText":"indexOrModel","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,27],[667,27]],"newRange":[[667,27],[667,28]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,28],[667,28]],"newRange":[[667,28],[667,29]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,29],[667,29]],"newRange":[[667,29],[667,30]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,30],[667,30]],"newRange":[[667,30],[667,31]],"oldText":"","newText":"x","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,59],[667,59]],"newRange":[[667,59],[667,60]],"oldText":"","newText":"O","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,60],[667,60]],"newRange":[[667,60],[667,61]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,61],[667,61]],"newRange":[[667,61],[667,62]],"oldText":"","newText":"M","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,62],[667,62]],"newRange":[[667,62],[667,63]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,63],[667,63]],"newRange":[[667,63],[667,64]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,64],[667,64]],"newRange":[[667,64],[667,65]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[667,65],[667,65]],"newRange":[[667,65],[667,66]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,14],[667,5]],"newRange":[[666,14],[666,14]],"oldText":"indexOrModel;\r\n\t\tif ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,42],[666,42]],"newRange":[[666,42],[666,43]],"oldText":"","newText":"?","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,43],[666,43]],"newRange":[[666,43],[666,44]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[666,25],[666,25]]},"newParams":{"range":[[666,24],[666,25]]},"deserializer":"MarkerPatch"},{"oldRange":[[666,24],[666,25]],"newRange":[[666,24],[666,24]],"oldText":"!","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,24],[666,24]],"newRange":[[666,24],[666,25]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,49],[666,49]],"newRange":[[666,49],[666,50]],"oldText":"","newText":"O","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,50],[666,50]],"newRange":[[666,50],[666,51]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,51],[666,51]],"newRange":[[666,51],[666,52]],"oldText":"","newText":"M","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,52],[666,52]],"newRange":[[666,52],[666,53]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,53],[666,53]],"newRange":[[666,53],[666,54]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,54],[666,54]],"newRange":[[666,54],[666,55]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,55],[666,55]],"newRange":[[666,55],[666,56]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[666,58],[666,58]]},"newParams":{"range":[[666,57],[666,58]]},"deserializer":"MarkerPatch"},{"oldRange":[[666,57],[666,58]],"newRange":[[666,57],[666,57]],"oldText":"=","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[666,57],[666,57]],"newRange":[[666,57],[666,58]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":true,"range":[[666,35],[666,40]]},"newParams":{"tailed":false,"range":[[666,40],[666,40]]},"deserializer":"MarkerPatch"},{"oldRange":[[666,35],[666,40]],"newRange":[[666,35],[666,47]],"oldText":"index","newText":"indexOrModel","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"reversed":false,"range":[[656,45],[656,45]]},"newParams":{"reversed":true,"range":[[656,0],[656,45]]},"deserializer":"MarkerPatch"},{"oldRange":[[656,0],[656,45]],"newRange":[[656,0],[656,0]],"oldText":"\t// TODO: make url relative before deployment","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[656,0],[656,0]]},"newParams":{"range":[[655,14],[656,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[655,14],[656,0]],"newRange":[[655,14],[655,14]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"reversed":false,"range":[[655,14],[655,14]]},"newParams":{"reversed":true,"range":[[655,0],[655,14]]},"deserializer":"MarkerPatch"},{"oldRange":[[655,0],[655,14]],"newRange":[[655,0],[655,0]],"oldText":"\tmodel: Cycle,","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[655,0],[655,0]]},"newParams":{"range":[[654,45],[655,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[654,45],[655,0]],"newRange":[[654,45],[654,45]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[646,2],[650,3]],"newRange":[[646,2],[646,2]],"oldText":"bindControls: function () {\r\n\t\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\t\tthis.$title = this.$('.title-input');\r\n\t\t\treturn this;\r\n\t\t}","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[646,2],[646,2]]},"newParams":{"range":[[646,0],[646,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[646,0],[646,2]],"newRange":[[646,0],[646,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[646,0],[646,0]]},"newParams":{"range":[[645,0],[646,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[645,0],[646,0]],"newRange":[[645,0],[645,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[645,0],[645,0]]},"newParams":{"range":[[644,4],[645,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[644,4],[645,0]],"newRange":[[644,4],[644,4]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[644,4],[644,4]]},"newParams":{"range":[[644,3],[644,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[644,3],[644,4]],"newRange":[[644,3],[644,3]],"oldText":",","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[627,4],[627,4]],"newRange":[[627,4],[628,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[628,0],[628,0]],"newRange":[[628,0],[628,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[628,2],[628,2]],"newRange":[[628,2],[629,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[629,0],[629,0]],"newRange":[[629,0],[629,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[629,2],[629,2]],"newRange":[[629,2],[633,3]],"oldText":"","newText":"bindControls: function () {\r\n\t\t\tBaseView.prototype.bindControls.apply(this, arguments);\r\n\t\t\tthis.$title = this.$('.title-input');\r\n\t\t\treturn this;\r\n\t\t}","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[633,3],[633,3]],"newRange":[[633,3],[633,4]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[618,13],[618,13]]},"newParams":{"range":[[618,12],[618,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[618,12],[618,13]],"newRange":[[618,12],[618,12]],"oldText":">","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[618,12],[618,12]],"newRange":[[618,12],[618,13]],"oldText":"","newText":"!","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[618,13],[618,13]],"newRange":[[618,13],[618,14]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[628,0],[628,2]],"newRange":[[628,0],[628,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[516,13],[516,13]]},"newParams":{"range":[[516,12],[516,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[516,12],[516,13]],"newRange":[[516,12],[516,12]],"oldText":">","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[516,12],[516,12]],"newRange":[[516,12],[516,13]],"oldText":"","newText":"!","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[516,13],[516,13]],"newRange":[[516,13],[516,14]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[527,2],[551,4]],"newRange":[[527,2],[527,2]],"oldText":"events: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar rotations = this.model.get('RotationList');\r\n\t\t\t\trotations.create({'WorkoutID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val()\r\n\t\t\t\t});\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t},","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[527,2],[527,2]]},"newParams":{"range":[[527,0],[527,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[527,0],[527,2]],"newRange":[[527,0],[527,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[527,0],[527,0]]},"newParams":{"range":[[526,0],[527,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[526,0],[527,0]],"newRange":[[526,0],[526,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[526,0],[526,0]]},"newParams":{"range":[[525,4],[526,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[525,4],[526,0]],"newRange":[[525,4],[525,4]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[532,3],[532,3]],"newRange":[[532,3],[532,4]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[532,4],[532,4]],"newRange":[[532,4],[533,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[533,0],[533,0]],"newRange":[[533,0],[533,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[533,2],[533,2]],"newRange":[[533,2],[534,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[534,0],[534,0]],"newRange":[[534,0],[534,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[534,2],[534,2]],"newRange":[[534,2],[558,4]],"oldText":"","newText":"events: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar rotations = this.model.get('RotationList');\r\n\t\t\t\trotations.create({'WorkoutID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val()\r\n\t\t\t\t});\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t},","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[558,4],[558,4]]},"newParams":{"range":[[558,3],[558,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[558,3],[558,4]],"newRange":[[558,3],[558,3]],"oldText":",","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[563,16],[563,16]]},"newParams":{"range":[[563,0],[563,16]]},"deserializer":"MarkerPatch"},{"oldRange":[[563,0],[563,16]],"newRange":[[563,0],[563,0]],"oldText":"\tmodel: Workout,","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[563,0],[563,0]]},"newParams":{"range":[[562,47],[563,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[562,47],[563,0]],"newRange":[[562,47],[562,47]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[457,17],[457,17]]},"newParams":{"range":[[457,0],[457,17]]},"deserializer":"MarkerPatch"},{"oldRange":[[457,0],[457,17]],"newRange":[[457,0],[457,0]],"oldText":"\tmodel: Rotation,","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[457,0],[457,0]]},"newParams":{"range":[[456,48],[457,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[456,48],[457,0]],"newRange":[[456,48],[456,48]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[421,2],[445,4]],"newRange":[[421,2],[421,2]],"oldText":"events: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar exercises = this.model.get('ExerciseList');\r\n\t\t\t\texercises.create({'RotationID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val()\r\n\t\t\t\t})\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t},","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[421,2],[421,2]]},"newParams":{"range":[[421,0],[421,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[421,0],[421,2]],"newRange":[[421,0],[421,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[421,0],[421,0]]},"newParams":{"range":[[420,0],[421,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[420,0],[421,0]],"newRange":[[420,0],[420,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[420,0],[420,0]]},"newParams":{"range":[[419,4],[420,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[419,4],[420,0]],"newRange":[[419,4],[419,4]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[426,3],[426,3]],"newRange":[[426,3],[426,4]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[426,4],[426,4]],"newRange":[[426,4],[427,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[427,0],[427,0]],"newRange":[[427,0],[427,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[427,2],[427,2]],"newRange":[[427,2],[428,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[428,0],[428,0]],"newRange":[[428,0],[428,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[428,2],[428,2]],"newRange":[[428,2],[452,4]],"oldText":"","newText":"events: {\r\n\t\t\t'click .create': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar fetch = this.model.fetch.bind(this.model, null);\r\n\t\t\t\tvar exercises = this.model.get('ExerciseList');\r\n\t\t\t\texercises.create({'RotationID': this.model.id}, {success: fetch});\r\n\t\t\t},\r\n\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val()\r\n\t\t\t\t})\r\n\t\t\t\tthis.model.save();\r\n\t\t\t}\r\n\t\t},","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[452,4],[452,4]]},"newParams":{"range":[[452,3],[452,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[452,3],[452,4]],"newRange":[[452,3],[452,3]],"oldText":",","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[410,13],[410,13]]},"newParams":{"range":[[410,12],[410,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[410,12],[410,13]],"newRange":[[410,12],[410,12]],"oldText":">","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[410,12],[410,12]],"newRange":[[410,12],[410,13]],"oldText":"","newText":"!","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[410,13],[410,13]],"newRange":[[410,13],[410,14]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[350,17],[350,17]]},"newParams":{"range":[[350,0],[350,17]]},"deserializer":"MarkerPatch"},{"oldRange":[[350,0],[350,17]],"newRange":[[350,0],[350,0]],"oldText":"\tmodel: Exercise,","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[350,0],[350,0]]},"newParams":{"range":[[349,48],[350,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[349,48],[350,0]],"newRange":[[349,48],[349,48]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[335,4],[335,4]]},"newParams":{"range":[[335,3],[335,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[335,3],[335,4]],"newRange":[[335,3],[335,3]],"oldText":",","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[319,2],[335,3]],"newRange":[[319,2],[319,2]],"oldText":"events: {\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val(),\r\n\t\t\t\t\t'Sets': Number(this.$sets.val()),\r\n\t\t\t\t\t'Amount': Number(this.$reps.val()),\r\n\t\t\t\t\t'UnitsOfMeasure': this.$units.val()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[319,2],[319,2]]},"newParams":{"range":[[319,0],[319,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[319,0],[319,2]],"newRange":[[319,0],[319,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[319,0],[319,0]]},"newParams":{"range":[[318,0],[319,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[318,0],[319,0]],"newRange":[[318,0],[318,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[318,0],[318,0]]},"newParams":{"range":[[317,4],[318,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[317,4],[318,0]],"newRange":[[317,4],[317,4]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[327,3],[327,3]],"newRange":[[327,3],[327,4]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[327,4],[327,4]],"newRange":[[327,4],[328,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[328,0],[328,0]],"newRange":[[328,0],[328,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[328,2],[328,2]],"newRange":[[328,2],[329,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[329,0],[329,0]],"newRange":[[329,0],[329,2]],"oldText":"","newText":"\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[329,2],[329,2]],"newRange":[[329,2],[345,3]],"oldText":"","newText":"events: {\r\n\t\t\t'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},\r\n\r\n\t\t\t'submit form': function (event) {\r\n\t\t\t\tthis.model.set({\r\n\t\t\t\t\t'Title': this.$title.val(),\r\n\t\t\t\t\t'Description': this.$desc.val(),\r\n\t\t\t\t\t'Sets': Number(this.$sets.val()),\r\n\t\t\t\t\t'Amount': Number(this.$reps.val()),\r\n\t\t\t\t\t'UnitsOfMeasure': this.$units.val()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[531,0],[531,2]],"newRange":[[531,0],[531,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[426,0],[426,2]],"newRange":[[426,0],[426,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[328,0],[328,2]],"newRange":[[328,0],[328,0]],"oldText":"\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[128,50],[128,50]]},"newParams":{"range":[[128,0],[128,50]]},"deserializer":"MarkerPatch"},{"oldRange":[[128,0],[128,50]],"newRange":[[128,0],[128,0]],"oldText":"\t\t// Render after each change to the backing model","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[128,0],[128,0]]},"newParams":{"range":[[127,26],[128,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[127,26],[128,0]],"newRange":[[127,26],[127,26]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[650,45],[650,45]],"newRange":[[650,45],[651,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[651,0],[651,0]],"newRange":[[651,0],[651,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,1],[651,1]],"newRange":[[651,1],[651,2]],"oldText":"","newText":"m","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,2],[651,2]],"newRange":[[651,2],[651,3]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,3],[651,3]],"newRange":[[651,3],[651,4]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,4],[651,4]],"newRange":[[651,4],[651,5]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,5],[651,5]],"newRange":[[651,5],[651,6]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,6],[651,6]],"newRange":[[651,6],[651,7]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,7],[651,7]],"newRange":[[651,7],[651,8]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,8],[651,8]],"newRange":[[651,8],[651,9]],"oldText":"","newText":"C","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,9],[651,9]],"newRange":[[651,9],[651,10]],"oldText":"","newText":"y","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,10],[651,10]],"newRange":[[651,10],[651,11]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,11],[651,11]],"newRange":[[651,11],[651,12]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,12],[651,12]],"newRange":[[651,12],[651,13]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[651,13],[651,13]],"newRange":[[651,13],[651,14]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[559,47],[559,47]],"newRange":[[559,47],[560,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[560,0],[560,0]],"newRange":[[560,0],[560,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,1],[560,1]],"newRange":[[560,1],[560,2]],"oldText":"","newText":"m","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,2],[560,2]],"newRange":[[560,2],[560,3]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,3],[560,3]],"newRange":[[560,3],[560,4]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,4],[560,4]],"newRange":[[560,4],[560,5]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,5],[560,5]],"newRange":[[560,5],[560,6]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,6],[560,6]],"newRange":[[560,6],[560,7]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,7],[560,7]],"newRange":[[560,7],[560,8]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,8],[560,8]],"newRange":[[560,8],[560,9]],"oldText":"","newText":"W","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,9],[560,9]],"newRange":[[560,9],[560,10]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,10],[560,10]],"newRange":[[560,10],[560,11]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,11],[560,11]],"newRange":[[560,11],[560,12]],"oldText":"","newText":"k","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,12],[560,12]],"newRange":[[560,12],[560,13]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,13],[560,13]],"newRange":[[560,13],[560,14]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,14],[560,14]],"newRange":[[560,14],[560,15]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[560,15],[560,15]],"newRange":[[560,15],[560,16]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[454,48],[454,48]],"newRange":[[454,48],[455,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[455,0],[455,0]],"newRange":[[455,0],[455,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,1],[455,1]],"newRange":[[455,1],[455,2]],"oldText":"","newText":"m","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,2],[455,2]],"newRange":[[455,2],[455,3]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,3],[455,3]],"newRange":[[455,3],[455,4]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,4],[455,4]],"newRange":[[455,4],[455,5]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,5],[455,5]],"newRange":[[455,5],[455,6]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,6],[455,6]],"newRange":[[455,6],[455,7]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,7],[455,7]],"newRange":[[455,7],[455,8]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,8],[455,8]],"newRange":[[455,8],[455,9]],"oldText":"","newText":"R","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,9],[455,9]],"newRange":[[455,9],[455,10]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,10],[455,10]],"newRange":[[455,10],[455,11]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,11],[455,11]],"newRange":[[455,11],[455,12]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,12],[455,12]],"newRange":[[455,12],[455,13]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,13],[455,13]],"newRange":[[455,13],[455,14]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,14],[455,14]],"newRange":[[455,14],[455,15]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,15],[455,15]],"newRange":[[455,15],[455,16]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[455,16],[455,16]],"newRange":[[455,16],[455,17]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[348,48],[348,48]],"newRange":[[348,48],[349,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[349,0],[349,0]],"newRange":[[349,0],[349,1]],"oldText":"","newText":"\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,1],[349,1]],"newRange":[[349,1],[349,2]],"oldText":"","newText":"m","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,2],[349,2]],"newRange":[[349,2],[349,3]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,3],[349,3]],"newRange":[[349,3],[349,4]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,4],[349,4]],"newRange":[[349,4],[349,5]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,5],[349,5]],"newRange":[[349,5],[349,6]],"oldText":"","newText":"l","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,6],[349,6]],"newRange":[[349,6],[349,7]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,7],[349,7]],"newRange":[[349,7],[349,8]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,8],[349,8]],"newRange":[[349,8],[349,9]],"oldText":"","newText":"E","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,9],[349,9]],"newRange":[[349,9],[349,10]],"oldText":"","newText":"x","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,10],[349,10]],"newRange":[[349,10],[349,11]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,11],[349,11]],"newRange":[[349,11],[349,12]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,12],[349,12]],"newRange":[[349,12],[349,13]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,13],[349,13]],"newRange":[[349,13],[349,14]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,14],[349,14]],"newRange":[[349,14],[349,15]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,15],[349,15]],"newRange":[[349,15],[349,16]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[349,16],[349,16]],"newRange":[[349,16],[349,17]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[390,58],[390,58]]},"newParams":{"range":[[390,0],[390,58]]},"deserializer":"MarkerPatch"},{"oldRange":[[390,0],[390,58]],"newRange":[[390,0],[390,0]],"oldText":"\t// If it doesn't exist, create a new list with one member","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[390,0],[390,0]]},"newParams":{"range":[[389,66],[390,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[389,66],[390,0]],"newRange":[[389,66],[389,66]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[389,66],[389,66]]},"newParams":{"range":[[389,0],[389,66]]},"deserializer":"MarkerPatch"},{"oldRange":[[389,0],[389,66]],"newRange":[[389,0],[389,0]],"oldText":"\t// Ensure that the ExerciseList exists and is properly configured","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[389,0],[389,0]]},"newParams":{"range":[[388,0],[389,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[388,0],[389,0]],"newRange":[[388,0],[388,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[494,58],[494,58]]},"newParams":{"range":[[494,0],[494,58]]},"deserializer":"MarkerPatch"},{"oldRange":[[494,0],[494,58]],"newRange":[[494,0],[494,0]],"oldText":"\t// If it doesn't exist, create a new list with one member","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[494,0],[494,0]]},"newParams":{"range":[[493,66],[494,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[493,66],[494,0]],"newRange":[[493,66],[493,66]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[493,66],[493,66]]},"newParams":{"range":[[493,0],[493,66]]},"deserializer":"MarkerPatch"},{"oldRange":[[493,0],[493,66]],"newRange":[[493,0],[493,0]],"oldText":"\t// Ensure that the RotationList exists and is properly configured","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[493,0],[493,0]]},"newParams":{"range":[[492,0],[493,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[492,0],[493,0]],"newRange":[[492,0],[492,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[595,58],[595,58]]},"newParams":{"range":[[595,0],[595,58]]},"deserializer":"MarkerPatch"},{"oldRange":[[595,0],[595,58]],"newRange":[[595,0],[595,0]],"oldText":"\t// If it doesn't exist, create a new list with one member","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[595,0],[595,0]]},"newParams":{"range":[[594,65],[595,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[594,65],[595,0]],"newRange":[[594,65],[594,65]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[594,65],[594,65]]},"newParams":{"range":[[594,0],[594,65]]},"deserializer":"MarkerPatch"},{"oldRange":[[594,0],[594,65]],"newRange":[[594,0],[594,0]],"oldText":"\t// Ensure that the WorkoutList exists and is properly configured","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1426,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1426,"oldParams":{"range":[[594,0],[594,0]]},"newParams":{"range":[[593,0],[594,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[593,0],[594,0]],"newRange":[[593,0],[593,0]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1426,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[635,5],[635,5]],"newRange":[[635,5],[636,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[636,0],[636,0]],"newRange":[[636,0],[636,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[636,3],[636,3]],"newRange":[[636,3],[637,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[637,0],[637,0]],"newRange":[[637,0],[637,3]],"oldText":"","newText":"\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[637,3],[637,3]],"newRange":[[637,3],[641,5]],"oldText":"","newText":"'click .destroy': function (event) {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tthis.model.destroy();\r\n\t\t\t},","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[636,0],[636,3]],"newRange":[[636,0],[636,0]],"oldText":"\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/csb/Desktop/WorkoutEditorJS/main.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2d30c437a88e8a0116404a237332f05494c30143","deserializer":"TextBuffer"},{"text":"<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<title>Test</title>\r\n\r\n\t\t<style>\r\n\t\t\t/* mimic the real site\r\n\t\t\t *************************/\r\n\t\t\t* {\r\n\t\t\t\tfont-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n\t\t\t\tbox-sizing: border-box;\r\n\r\n\t\t\t}\r\n\t\t\tbody {\r\n\t\t\t\tbackground-color: rgb(227,227,227);\r\n\t\t\t}\r\n\r\n\t\t\t/* general styles\r\n\t\t\t *************************/\r\n\t\t\th1, h2, h3, h4, h5, h6 {\r\n\t\t\t\tpadding: 5px 0;\r\n\t\t\t\tmargin: 0;\r\n\t\t\t}\r\n\r\n\t\t\tdetails > summary::-webkit-details-marker { display:none; }\r\n\t\t\tdetails > summary::-moz-details-marker { display:none; }\r\n\t\t\tdetails > summary::-ms-details-marker { display:none; }\r\n\t\t\tdetails > summary::-o-details-marker { display:none; }\r\n\t\t\tdetails > summary::details-marker { display:none; }\r\n\r\n\t\t\tdetails > summary h1 {\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t}\r\n\r\n\t\t\t@media print {\r\n\t\t\t\t* {\r\n\t\t\t\t\tcolor: black !important;\r\n\t\t\t\t}\r\n\t\t\t\tbutton, .cycle-select {\r\n\t\t\t\t\tdisplay: none !important;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/* records\r\n\t\t\t *************************/\r\n\t\t\t.cycle-select {\r\n\t\t\t\twidth: 15em;\r\n\t\t\t}\r\n\t\t\t.cycle-details {\r\n\t\t\t\tmargin-top: 1em;\r\n\t\t\t}\r\n\t\t\t.cycle > header > * {\r\n\t\t\t\tdisplay: inline-block;\r\n\t\t\t}\r\n\t\t\t.cycle > header .edit {\r\n\t\t\t\tmargin-left: 5px;\r\n\t\t\t\tvisibility: hidden;\r\n\t\t\t}\r\n\t\t\t.cycle > header:hover .edit {\r\n\t\t\t\tvisibility: visible;\r\n\t\t\t}\r\n\t\t\t.workout {\r\n\t\t\t\tmargin-bottom: 1em;\r\n\t\t\t\tborder: 1px solid black;\r\n\t\t\t\tbackground-color: rgb(42,42,42);\r\n\t\t\t\tcolor: white;\r\n\t\t\t}\r\n\t\t\t.rotation {\r\n\t\t\t\tbackground-color: rgb(46,114,161);\r\n\t\t\t\tcolor: white;\r\n\t\t\t}\r\n\t\t\t.exercise {\r\n\t\t\t\tpadding-bottom: 0.5em;\r\n\t\t\t\tbackground-color: rgb(227,227,227);\r\n\t\t\t\tcolor: black;\r\n\t\t\t}\r\n\t\t\t.handle {\r\n\t\t\t\tcursor: move;\r\n\t\t\t}\r\n\t\t\t.handle button {\r\n\t\t\t\tcursor: auto;\r\n\t\t\t}\r\n\t\t\t@media print {\r\n\t\t\t\t.rotation {\r\n\t\t\t\t\tmargin-left: 1em;\r\n\t\t\t\t}\r\n\t\t\t\t.exercise {\r\n\t\t\t\t\tmargin-left: 1em;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/* .records with details include .workout, .rotation, and .exercise, and NOT .cycle */\r\n\t\t\t.record > details > summary {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tpadding-left: 10px;\r\n\t\t\t}\r\n\t\t\t.record > details > summary h1 {\r\n\t\t\t\tdisplay: inline-block;\r\n\t\t\t\tvertical-align: middle;\r\n\t\t\t}\r\n\t\t\t.record > details > summary .summary,\r\n\t\t\t.record > details > summary .description {\r\n\t\t\t\tdisplay: inline-block;\r\n\t\t\t\tvertical-align: middle;\r\n\t\t\t\tmargin-left: 1em;\r\n\t\t\t\tmargin-right: 1em;\r\n\t\t\t\tfont-size: 0.75em;\r\n\t\t\t}\r\n\t\t\t.record > details > summary .create {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: 0.75em;\r\n\t\t\t\tright: 10px;\r\n\t\t\t}\r\n\r\n\t\t\t.workout  > details > summary .description,\r\n\t\t\t.rotation > details > summary .description {\r\n\t\t\t\tmax-width: 70%;\r\n\t\t\t}\r\n\t\t\t.exercise > details > summary .description {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tmargin: 0 0 0 50px;\r\n\t\t\t}\r\n\t\t\t@media print {\r\n\t\t\t\t.workout  > details > summary .description,\r\n\t\t\t\t.rotation > details > summary .description {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tmax-width: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/* forms\r\n\t\t\t *************************/\r\n\t\t\tlabel {\r\n\t\t\t\tdisplay: inline-block;\r\n\t\t\t\tvertical-align: top;\r\n\t\t\t\tpadding: 5px;\r\n\t\t\t}\r\n\t\t\t.desc-label {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t\t.desc-input {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tmax-width: 70em;\r\n\t\t\t\theight: 12em;\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/* lists\r\n\t\t\t *************************/\r\n\t\t\t.dragged {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\topacity: 0.5;\r\n\t\t\t\tz-index: 2000;\r\n\t\t\t}\r\n\t\t\tol {\r\n\t\t\t\tpadding-left: 0;\r\n\t\t\t\tlist-style-type: none;\r\n\t\t\t}\r\n\t\t\tol > li.placeholder {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tborder: none;\r\n\t\t\t\tbackground: none;\r\n\t\t\t\theight: 0;\r\n\t\t\t\tmargin: 0;\r\n\t\t\t\tpadding: 0;\r\n\t\t\t\tbottom: 6px;\r\n\t\t\t}\r\n\t\t\tol > li.placeholder::before {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tcontent: \"\";\r\n\t\t\t\theight: 0;\r\n\t\t\t\twidth: 0;\r\n\t\t\t\tmarign: -5px;\r\n\t\t\t\tborder-top: 5px solid transparent;\r\n\t\t\t\tborder-bottom: 5px solid transparent;\r\n\t\t\t\tborder-right: 10px solid transparent;\r\n\t\t\t\tborder-left: 10px solid red;\r\n\t\t\t}\r\n\t\t</style>\r\n\r\n\t\t<script src=\"js/jquery-1.11.0.js\"></script>\r\n\t\t<script src=\"js/jquery-sortable.js\"></script>\r\n\t\t<script src=\"js/underscore.js\"></script>\r\n\t\t<script src=\"js/backbone.js\"></script>\r\n\t\t<script src=\"main.js\"></script>\r\n\r\n\r\n\t\t<!-- Templates are the declarative component of the views -->\r\n\t\t<!-- Template API:\r\n\t\tTemplates are Underscore.js templates. The template tags have been changed from their\r\n\t\tdefaults to avoid collision with ASP.Net webforms tags.\r\n\t\t  - Code in `{% ... %}` is evaluated as JavaScript code, useful for loops.\r\n\t\t  - Code in `{{ ... }}` is evaluated and the result is interpolated.\r\n\t\t  - Code in `{{- ... }}` is evaluated, HTML escaped, and interpolated.\r\n\t\t  - The `print(str)` function prints to the template output.\r\n\t\tAdditionally, the custom views in this application expose the following functionality:\r\n\t\t\t   - Tags containing a `data-content` attribute will have their contents replaced by\r\n\t\t\t     associated content. The value of `data-content` should be an attribute of the\r\n\t\t\t     backing model. If that attribute is another view, it is rendered and inserted.\r\n\t\t\t     Otherwise the attribute is inserted literally.\r\n\t\t\t   - Templates have access to the model and collection associated with the view through\r\n\t\t\t     the bound global variables `model` and `collection`.\r\n\t\t\t   - Views can specify a `templateId` property set to the id of any template. If so,\r\n\t\t\t     the coresponding template is rendered for the view.\r\n\t\t\tThe type of the script tags should be `text/html` or any other type that won't be\r\n\t\t\tinterpreted by the browser.\r\n\t\t\tSee: http://underscorejs.org/#template\r\n\t\t  -->\r\n\r\n\t\t<script type=\"text/html\" id=\"collection-view\">\r\n\t\t\t<ol class=\"sortable\">\r\n\t\t\t\t{% collection.each(function (model) { %}\r\n\t\t\t\t\t<li data-content=\"{{ model.cid }}\" data-model-id=\"{{ model.cid }}\"></li>\r\n\t\t\t\t{% }) %}\r\n\t\t\t</ol>\r\n\t\t</script>\r\n\r\n\r\n\t\t<!-- Cycle -->\r\n\r\n\t\t<script type=\"text/html\" id=\"cycle-view\">\r\n\t\t\t<details>\r\n\t\t\t\t<summary>\r\n\t\t\t\t\t<h1>{{ model.get(\"Title\") }}</h1>\r\n\t\t\t\t</summary>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<input class=\"title-input\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Title\"\r\n\t\t\t\t\t\tinputmode=\"latin-name\"\r\n\t\t\t\t\t\tvalue='{{ model.get(\"Title\") }}'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input type=\"submit\" value=\"Save\" />\r\n\t\t\t\t\t<button class=\"destroy\">Delete</button>\r\n\t\t\t\t</form>\r\n\t\t\t</details>\r\n\t\t\t<div data-content=\"WorkoutList\"></div>\r\n\t\t\t<button class=\"create\">Add Workout</button>\r\n\t\t</script>\r\n\r\n\t\t<script type=\"text/html\" id=\"cycle-collection-view\">\r\n\t\t\t<select class=\"cycle-select\">\r\n\t\t\t\t{% collection.each(function (cycle, index) { %}\r\n\t\t\t\t\t<option {{ (index === collection.selectedIndex) ? \"selected='selected'\" : null }}>\r\n\t\t\t\t\t\t{{ cycle.get(\"Title\") }}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t{% }) %}\r\n\t\t\t</select>\r\n\t\t\t<button class=\"create\">New Cycle</button>\r\n\t\t\t<div class=\"cycle-details\"\r\n\t\t\t\tdata-content=\"{{ (collection.selected) ? collection.selected.cid : null }}\">\r\n\t\t\t</div>\r\n\t\t</script>\r\n\r\n\r\n\t\t<!-- Workout -->\r\n\r\n\t\t<script type=\"text/html\" id=\"workout-view\">\r\n\t\t\t<details>\r\n\t\t\t\t<summary class=\"handle\">\r\n\t\t\t\t\t<h1>{{ model.get(\"Title\") }}</h1>\r\n\t\t\t\t\t<p class=\"summary\">{{ model.summarize() }}</p>\r\n\t\t\t\t\t<p class=\"description\">{{ model.get(\"Description\") }}</p>\r\n\t\t\t\t\t<button class=\"create\">Add Rotation</button>\r\n\t\t\t\t</summary>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div class=\"control-btns\">\r\n\t\t\t\t\t\t<input type=\"submit\" value=\"Save\" />\r\n\t\t\t\t\t\t<button class=\"destroy\">Delete</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<label>Title<br/>\r\n\t\t\t\t\t\t<input class=\"title-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Title\"\r\n\t\t\t\t\t\t\tinputmode=\"latin-name\"\r\n\t\t\t\t\t\t\tvalue='{{ model.get(\"Title\") }}'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label class=\"desc-label\">Description<br/>\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tclass=\"desc-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t\t>{{ model.get(\"Description\") }}</textarea>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</form>\r\n\t\t\t</details>\r\n\t\t\t<div data-content=\"RotationList\"></div>\r\n\t\t</script>\r\n\r\n\r\n\t\t<!-- Rotation -->\r\n\r\n\t\t<script type=\"text/html\" id=\"rotation-view\">\r\n\t\t\t<details>\r\n\t\t\t\t<summary class=\"handle\">\r\n\t\t\t\t\t<h1>{{ model.get(\"Title\") }}</h1>\r\n\t\t\t\t\t<p class=\"summary\">{{ model.summarize() }}</p>\r\n\t\t\t\t\t<p class=\"description\">{{ model.get(\"Description\") }}</p>\r\n\t\t\t\t\t<button class=\"create\">Add Exercise</button>\r\n\t\t\t\t</summary>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div class=\"control-btns\">\r\n\t\t\t\t\t\t<input type=\"submit\" value=\"Save\" />\r\n\t\t\t\t\t\t<button class=\"destroy\">Delete</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<label>Title<br/>\r\n\t\t\t\t\t\t<input class=\"title-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Title\"\r\n\t\t\t\t\t\t\tinputmode=\"latin-name\"\r\n\t\t\t\t\t\t\tvalue='{{ model.get(\"Title\") }}'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label class=\"desc-label\">Description<br/>\r\n\t\t\t\t\t\t<textarea class=\"desc-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t\t>{{ model.get(\"Description\") }}</textarea>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</form>\r\n\t\t\t</details>\r\n\t\t\t<div data-content=\"ExerciseList\"></div>\r\n\t\t</script>\r\n\r\n\r\n\t\t<!-- Exercise -->\r\n\r\n\t\t<script type=\"text/html\" id=\"exercise-view\">\r\n\t\t\t<details>\r\n\t\t\t\t<summary class=\"handle\">\r\n\t\t\t\t\t<h1>{{ model.get(\"Title\") }}</h1>\r\n\t\t\t\t\t<p class=\"summary\">{{ model.summarize() }}</p>\r\n\t\t\t\t\t<p class=\"description\">{{ model.get(\"Description\") }}</p>\r\n\t\t\t\t</summary>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div class=\"control-btns\">\r\n\t\t\t\t\t\t<input type=\"submit\" value=\"Save\" />\r\n\t\t\t\t\t\t<button class=\"destroy\">Delete</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<label>Title<br/>\r\n\t\t\t\t\t\t<input class=\"title-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Title\"\r\n\t\t\t\t\t\t\tinputmode=\"latin-name\"\r\n\t\t\t\t\t\t\tvalue='{{ model.get(\"Title\") }}'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>Sets<br/>\r\n\t\t\t\t\t\t<input class=\"sets-input\"\r\n\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\tplaceholder=\"Sets (#)\"\r\n\t\t\t\t\t\t\tinputmode=\"numeric\"\r\n\t\t\t\t\t\t\tvalue='{{ model.get(\"Sets\") }}'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>Reps<br/>\r\n\t\t\t\t\t\t<input class=\"reps-input\"\r\n\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\tplaceholder=\"Reps (#)\"\r\n\t\t\t\t\t\t\tinputmode=\"numeric\"\r\n\t\t\t\t\t\t\tvalue='{{ model.get(\"Amount\") }}'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label>Units of measure<br/>\r\n\t\t\t\t\t\t<input class=\"units-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Units\"\r\n\t\t\t\t\t\t\tinputmode=\"latin\"\r\n\t\t\t\t\t\t\tvalue='{{ model.get(\"UnitsOfMeasure\") }}'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<label class=\"desc-label\">Description<br/>\r\n\t\t\t\t\t\t<textarea class=\"desc-input\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t\t>{{ model.get(\"Description\") }}</textarea>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</form>\r\n\t\t\t</details>\r\n\t\t</script>\r\n\r\n\t\t<!-- End of templates -->\r\n\r\n\t</head>\r\n\r\n\t<body>\r\n\t\t<p>Login to <a href=\"https://peakdev.titustechnologies.com/team admin z/workouteditor.aspx\">Titus</a> to see your workouts</p>\r\n\t</body>\r\n</html>\r\n","markers":{"markers":{"5":{"id":5,"range":[[234,35],[234,35]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":21,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[249,3],[249,48]],"newRange":[[249,3],[249,3]],"oldText":"<button class=\"destroy\">Delete Cycle</button>","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":5,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":5,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":5,"oldParams":{"range":[[249,3],[249,3]]},"newParams":{"range":[[249,0],[249,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[249,0],[249,3]],"newRange":[[249,0],[249,0]],"oldText":"\t\t\t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":5,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":5,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":5,"oldParams":{"range":[[249,0],[249,0]]},"newParams":{"range":[[248,44],[249,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[248,44],[249,0]],"newRange":[[248,44],[248,44]],"oldText":"\r\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":5,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[233,41],[233,41]],"newRange":[[233,41],[234,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[234,0],[234,0]],"newRange":[[234,0],[234,5]],"oldText":"","newText":"\t\t\t\t\t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[234,5],[234,5]],"newRange":[[234,5],[234,50]],"oldText":"","newText":"<button class=\"destroy\">Delete Cycle</button>","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[234,36],[234,41]],"newRange":[[234,36],[234,36]],"oldText":"Cycle","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":5,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":5,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":5,"oldParams":{"reversed":false,"range":[[234,36],[234,36]]},"newParams":{"reversed":true,"range":[[234,35],[234,36]]},"deserializer":"MarkerPatch"},{"oldRange":[[234,35],[234,36]],"newRange":[[234,35],[234,35]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":5,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/csb/Desktop/WorkoutEditorJS/index.html","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4cb0f1f193a93695c42a3568dec5166ff045b18b","deserializer":"TextBuffer"},{"text":"//     Backbone.js 1.1.0\n\n//     (c) 2010-2011 Jeremy Ashkenas, DocumentCloud Inc.\n//     (c) 2011-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(){\n\n  // Initial Setup\n  // -------------\n\n  // Save a reference to the global object (`window` in the browser, `exports`\n  // on the server).\n  var root = this;\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create local references to array methods we'll want to use later.\n  var array = [];\n  var push = array.push;\n  var slice = array.slice;\n  var splice = array.splice;\n\n  // The top-level namespace. All public Backbone classes and modules will\n  // be attached to this. Exported for both the browser and the server.\n  var Backbone;\n  if (typeof exports !== 'undefined') {\n    Backbone = exports;\n  } else {\n    Backbone = root.Backbone = {};\n  }\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.1.0';\n\n  // Require Underscore, if we're on the server, and it's not already present.\n  var _ = root._;\n  if (!_ && (typeof require !== 'undefined')) _ = require('underscore');\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // custom events. You may bind with `on` or remove with `off` callback\n  // functions to an event; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {\n\n    // Bind an event to a `callback` function. Passing `\"all\"` will bind\n    // the callback to all events fired.\n    on: function(name, callback, context) {\n      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\n      this._events || (this._events = {});\n      var events = this._events[name] || (this._events[name] = []);\n      events.push({callback: callback, context: context, ctx: context || this});\n      return this;\n    },\n\n    // Bind an event to only be triggered a single time. After the first time\n    // the callback is invoked, it will be removed.\n    once: function(name, callback, context) {\n      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n      var self = this;\n      var once = _.once(function() {\n        self.off(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n      return this.on(name, once, context);\n    },\n\n    // Remove one or many callbacks. If `context` is null, removes all\n    // callbacks with that function. If `callback` is null, removes all\n    // callbacks for the event. If `name` is null, removes all bound\n    // callbacks for all events.\n    off: function(name, callback, context) {\n      var retain, ev, events, names, i, l, j, k;\n      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n      if (!name && !callback && !context) {\n        this._events = {};\n        return this;\n      }\n      names = name ? [name] : _.keys(this._events);\n      for (i = 0, l = names.length; i < l; i++) {\n        name = names[i];\n        if (events = this._events[name]) {\n          this._events[name] = retain = [];\n          if (callback || context) {\n            for (j = 0, k = events.length; j < k; j++) {\n              ev = events[j];\n              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n              }\n            }\n          }\n          if (!retain.length) delete this._events[name];\n        }\n      }\n\n      return this;\n    },\n\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\n    // passed the same arguments as `trigger` is, apart from the event name\n    // (unless you're listening on `\"all\"`, which will cause your callback to\n    // receive the true name of the event as the first argument).\n    trigger: function(name) {\n      if (!this._events) return this;\n      var args = slice.call(arguments, 1);\n      if (!eventsApi(this, 'trigger', name, args)) return this;\n      var events = this._events[name];\n      var allEvents = this._events.all;\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, arguments);\n      return this;\n    },\n\n    // Tell this object to stop listening to either specific events ... or\n    // to every object it's currently listening to.\n    stopListening: function(obj, name, callback) {\n      var listeningTo = this._listeningTo;\n      if (!listeningTo) return this;\n      var remove = !name && !callback;\n      if (!callback && typeof name === 'object') callback = this;\n      if (obj) (listeningTo = {})[obj._listenId] = obj;\n      for (var id in listeningTo) {\n        obj = listeningTo[id];\n        obj.off(name, callback, this);\n        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];\n      }\n      return this;\n    }\n\n  };\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Implement fancy features of the Events API such as multiple event\n  // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n  // in terms of the existing API.\n  var eventsApi = function(obj, action, name, rest) {\n    if (!name) return true;\n\n    // Handle event maps.\n    if (typeof name === 'object') {\n      for (var key in name) {\n        obj[action].apply(obj, [key, name[key]].concat(rest));\n      }\n      return false;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\n    }\n  };\n\n  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n  // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n  // listen to an event in another object ... keeping track of what it's\n  // listening to.\n  _.each(listenMethods, function(implementation, method) {\n    Events[method] = function(obj, name, callback) {\n      var listeningTo = this._listeningTo || (this._listeningTo = {});\n      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n      listeningTo[id] = obj;\n      if (!callback && typeof name === 'object') callback = this;\n      obj[implementation](name, callback, this);\n      return this;\n    };\n  });\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      var attr, attrs, unset, changes, silent, changing, prev, current;\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      unset           = options.unset;\n      silent          = options.silent;\n      changes         = [];\n      changing        = this._changing;\n      this._changing  = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n      current = this.attributes, prev = this._previousAttributes;\n\n      // Check for changes of `id`.\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n      // For each `set` attribute, update or delete the current value.\n      for (attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          this.changed[attr] = val;\n        } else {\n          delete this.changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = true;\n        for (var i = 0, l = changes.length; i < l; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var val, changed = false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      for (var attr in diff) {\n        if (_.isEqual(old[attr], (val = diff[attr]))) continue;\n        (changed || (changed = {}))[attr] = val;\n      }\n      return changed;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server. If the server's representation of the\n    // model differs from its current attributes, they will be overridden,\n    // triggering a `\"change\"` event.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        if (!model.set(model.parse(resp, options), options)) return false;\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      var attrs, method, xhr, attributes = this.attributes;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true}, options);\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !options.wait) {\n        if (!this.set(attrs, options)) return false;\n      } else {\n        if (!this._validate(attrs, options)) return false;\n      }\n\n      // Set temporary attributes if `{wait: true}`.\n      if (attrs && options.wait) {\n        this.attributes = _.extend({}, attributes, attrs);\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      if (options.parse === void 0) options.parse = true;\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = model.parse(resp, options);\n        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n          return false;\n        }\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch') options.attrs = attrs;\n      xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      if (attrs && options.wait) this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n\n      var destroy = function() {\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (options.wait || model.isNew()) destroy();\n        if (success) success(model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      if (this.isNew()) {\n        options.success();\n        return false;\n      }\n      wrapError(this, options);\n\n      var xhr = this.sync('delete', this, options);\n      if (!options.wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\n      if (this.isNew()) return base;\n      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return this.id == null;\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend(options || {}, { validate: true }));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model.\n  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  _.each(modelMethods, function(method) {\n    Model.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.attributes);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analagous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model){ return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      var singular = !_.isArray(models);\n      models = singular ? [models] : _.clone(models);\n      options || (options = {});\n      var i, l, index, model;\n      for (i = 0, l = models.length; i < l; i++) {\n        model = models[i] = this.get(models[i]);\n        if (!model) continue;\n        delete this._byId[model.id];\n        delete this._byId[model.cid];\n        index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n        this._removeReference(model);\n      }\n      return singular ? models[0] : models;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      options = _.defaults({}, options, setOptions);\n      if (options.parse) models = this.parse(models, options);\n      var singular = !_.isArray(models);\n      models = singular ? (models ? [models] : []) : _.clone(models);\n      var i, l, id, model, attrs, existing, sort;\n      var at = options.at;\n      var targetModel = this.model;\n      var sortable = this.comparator && (at == null) && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n      var toAdd = [], toRemove = [], modelMap = {};\n      var add = options.add, merge = options.merge, remove = options.remove;\n      var order = !sortable && add && remove ? [] : false;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (i = 0, l = models.length; i < l; i++) {\n        attrs = models[i];\n        if (attrs instanceof Model) {\n          id = model = attrs;\n        } else {\n          id = attrs[targetModel.prototype.idAttribute];\n        }\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(id)) {\n          if (remove) modelMap[existing.cid] = true;\n          if (merge) {\n            attrs = attrs === model ? model.attributes : attrs;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(attrs, options);\n          if (!model) continue;\n          toAdd.push(model);\n\n          // Listen to added models' events, and index models for lookup by\n          // `id` and by `cid`.\n          model.on('all', this._onModelEvent, this);\n          this._byId[model.cid] = model;\n          if (model.id != null) this._byId[model.id] = model;\n        }\n        if (order) order.push(existing || model);\n      }\n\n      // Remove nonexistent models if appropriate.\n      if (remove) {\n        for (i = 0, l = this.length; i < l; ++i) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this.remove(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      if (toAdd.length || (order && order.length)) {\n        if (sortable) sort = true;\n        this.length += toAdd.length;\n        if (at != null) {\n          for (i = 0, l = toAdd.length; i < l; i++) {\n            this.models.splice(at + i, 0, toAdd[i]);\n          }\n        } else {\n          if (order) this.models.length = 0;\n          var orderedModels = order || toAdd;\n          for (i = 0, l = orderedModels.length; i < l; i++) {\n            this.models.push(orderedModels[i]);\n          }\n        }\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort events.\n      if (!options.silent) {\n        for (i = 0, l = toAdd.length; i < l; i++) {\n          (model = toAdd[i]).trigger('add', model, this, options);\n        }\n        if (sort || (order && order.length)) this.trigger('sort', this, options);\n      }\n      \n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options || (options = {});\n      for (var i = 0, l = this.models.length; i < l; i++) {\n        this._removeReference(this.models[i]);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      this.remove(model, options);\n      return model;\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj.id] || this._byId[obj.cid] || this._byId[obj];\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      if (_.isEmpty(attrs)) return first ? void 0 : [];\n      return this[first ? 'find' : 'filter'](function(model) {\n        for (var key in attrs) {\n          if (attrs[key] !== model.get(key)) return false;\n        }\n        return true;\n      });\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      // Run sort based on type of `comparator`.\n      if (_.isString(this.comparator) || this.comparator.length === 1) {\n        this.models = this.sortBy(this.comparator, this);\n      } else {\n        this.models.sort(_.bind(this.comparator, this));\n      }\n\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return _.invoke(this.models, 'get', attr);\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === void 0) options.parse = true;\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success(collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      if (!(model = this._prepareModel(model, options))) return false;\n      if (!options.wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(model, resp, options) {\n        if (options.wait) collection.add(model, options);\n        if (success) success(model, resp, options);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models);\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (attrs instanceof Model) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model) {\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (model && event === 'change:' + model.idAttribute) {\n        delete this._byId[model.previous(model.idAttribute)];\n        if (model.id != null) this._byId[model.id] = model;\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n    'lastIndexOf', 'isEmpty', 'chain'];\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  _.each(methods, function(method) {\n    Collection.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.models);\n      return _[method].apply(_, args);\n    };\n  });\n\n  // Underscore methods that take a property name as an argument.\n  var attributeMethods = ['groupBy', 'countBy', 'sortBy'];\n\n  // Use attributes instead of properties.\n  _.each(attributeMethods, function(method) {\n    Collection.prototype[method] = function(value, context) {\n      var iterator = _.isFunction(value) ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    };\n  });\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be merged as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this.$el.remove();\n      this.stopListening();\n      return this;\n    },\n\n    // Change the view's element (`this.el` property), including event\n    // re-delegation.\n    setElement: function(element, delegate) {\n      if (this.$el) this.undelegateEvents();\n      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n      this.el = this.$el[0];\n      if (delegate !== false) this.delegateEvents();\n      return this;\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    // This only works for delegate-able events: not `focus`, `blur`, and\n    // not `change`, `submit`, and `reset` in Internet Explorer.\n    delegateEvents: function(events) {\n      if (!(events || (events = _.result(this, 'events')))) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[events[key]];\n        if (!method) continue;\n\n        var match = key.match(delegateEventSplitter);\n        var eventName = match[1], selector = match[2];\n        method = _.bind(method, this);\n        eventName += '.delegateEvents' + this.cid;\n        if (selector === '') {\n          this.$el.on(eventName, method);\n        } else {\n          this.$el.on(eventName, selector, method);\n        }\n      }\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view with `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n        this.setElement($el, false);\n      } else {\n        this.setElement(_.result(this, 'el'), false);\n      }\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n    // that still has ActiveX enabled by default, override jQuery to use that\n    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n    if (params.type === 'PATCH' && noXhrPatch) {\n      params.xhr = function() {\n        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n      };\n    }\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  var noXhrPatch = typeof window !== 'undefined' && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch':  'PATCH',\n    'delete': 'DELETE',\n    'read':   'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        callback && callback.apply(router, args);\n        router.trigger.apply(router, ['route:' + name].concat(args));\n        router.trigger('route', name, args);\n        Backbone.history.trigger('route', router, name, args);\n      });\n      return this;\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^\\/]+)';\n                   })\n                   .replace(splatParam, '(.*?)');\n      return new RegExp('^' + route + '$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param) {\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    _.bindAll(this, 'checkUrl');\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for detecting MSIE.\n  var isExplorer = /msie [\\w.]+/;\n\n  // Cached regex for removing a trailing slash.\n  var trailingSlash = /\\/$/;\n\n  // Cached regex for stripping urls of hash and query.\n  var pathStripper = /[?#].*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the cross-browser normalized URL fragment, either from the URL,\n    // the hash, or the override.\n    getFragment: function(fragment, forcePushState) {\n      if (fragment == null) {\n        if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n          fragment = this.location.pathname;\n          var root = this.root.replace(trailingSlash, '');\n          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error(\"Backbone.history has already been started\");\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);\n      var fragment          = this.getFragment();\n      var docMode           = document.documentMode;\n      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      if (oldIE && this._wantsHashChange) {\n        this.iframe = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n        this.navigate(fragment);\n      }\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._hasPushState) {\n        Backbone.$(window).on('popstate', this.checkUrl);\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n        Backbone.$(window).on('hashchange', this.checkUrl);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      // Determine if we need to change the base url, for a pushState link\n      // opened by a non-pushState browser.\n      this.fragment = fragment;\n      var loc = this.location;\n      var atRoot = loc.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !atRoot) {\n          this.fragment = this.getFragment(null, true);\n          this.location.replace(this.root + this.location.search + '#' + this.fragment);\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && atRoot && loc.hash) {\n          this.fragment = this.getHash().replace(routeStripper, '');\n          this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);\n        }\n\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n      clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n      if (current === this.fragment && this.iframe) {\n        current = this.getFragment(this.getHash(this.iframe));\n      }\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.any(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n      // Strip the fragment of the query and hash for matching.\n      fragment = fragment.replace(pathStripper, '');\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // Don't include a trailing slash on the root.\n      if (fragment === '' && url !== '/') url = url.slice(0, -1);\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._hasPushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if(!options.replace) this.iframe.document.open().close();\n          this._updateHash(this.iframe.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain, for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate;\n\n    // Add prototype properties (instance properties) to the subclass,\n    // if supplied.\n    if (protoProps) _.extend(child.prototype, protoProps);\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error(model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n}).call(this);\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":47,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/csb/Desktop/WorkoutEditorJS/js/backbone.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f54dd0df3ab62f1d5687d98076dffdbf690840f6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":11,"softTabs":false,"scrollTop":9425,"scrollLeft":0,"displayBuffer":{"id":12,"softWrap":true,"editorWidthInChars":177,"tokenizedBuffer":{"bufferPath":"/Users/csb/Desktop/WorkoutEditorJS/main.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":21,"softTabs":false,"scrollTop":3845,"scrollLeft":0,"displayBuffer":{"id":22,"softWrap":false,"editorWidthInChars":108,"tokenizedBuffer":{"bufferPath":"/Users/csb/Desktop/WorkoutEditorJS/index.html","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":47,"softTabs":true,"scrollTop":3863,"scrollLeft":0,"displayBuffer":{"id":48,"softWrap":true,"editorWidthInChars":176,"tokenizedBuffer":{"bufferPath":"/Users/csb/Desktop/WorkoutEditorJS/js/backbone.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/csb/Desktop/WorkoutEditorJS/index.html","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["bind","this.on('change:id', this.setupList)","memberAttrs","templateName","sync","done","fetchSelected"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/csb/Desktop/WorkoutEditorJS/main.js":1394917613414,"/Users/csb/Desktop/WorkoutEditorJS/index.html":1394920736411,"/Users/csb/Desktop/WorkoutEditorJS/js/backbone.js":1394917583085},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":7298295},"tree-view":{"directoryExpansionStates":{"js":{}},"selectedPath":"/Users/csb/Desktop/WorkoutEditorJS/index.html","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}